#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass tufte-book
\begin_preamble
\usepackage{pgfplots}
\usetikzlibrary{patterns}
\usetikzlibrary{er,positioning}
\usepackage{filecontents}
\setcounter{tocdepth}{2}
\setcounter{secnumdepth}{2}

\begin{filecontents*}{data/windows_success_rate.csv}
\end{filecontents*}
\begin{filecontents*}{data/matching_time_difference.csv}
\end{filecontents*}
\begin{filecontents*}{data/recording_length_success_rate.csv}
\end{filecontents*}
\begin{filecontents*}{data/min_hint.csv}
\end{filecontents*}
\begin{filecontents*}{data/c.csv}
\end{filecontents*}
\begin{filecontents*}{data/panako_length_success_rate.csv}
\end{filecontents*}
\pgfmathdeclarefunction{gauss}{2}{%
  \pgfmathparse{1/(#2*sqrt(2*pi))*exp(-((x-#1)^2)/(2*#2^2))}%
}

\usepackage[htt]{hyphenat}

%per filtrare dati csv
\pgfplotsset{
    discard if not/.style 2 args={
        x filter/.code={
            \edef\tempa{\thisrow{#1}}
            \edef\tempb{#2}
            \ifx\tempa\tempb
            \else
                \def\pgfmathresult{inf}
            \fi
        }
    }
}

\def\lst@lettertrue{\let\lst@ifletter\iffalse}
\end_preamble
\options a4paper
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title[Audio fingerprinting in WebAssembly per l'esecuzione in browser web]{
\end_layout

\begin_layout Plain Layout

  
\backslash
mbox{Audio} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\backslash
mbox{fingerprinting} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\backslash
mbox{in WebAssembly} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\backslash
mbox{per l'esecuzione} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

  
\backslash
mbox{in browser web}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Davide Pisanò - Antonio Servetti
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newgeometry{top=9cm,right=8cm}
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty} % Rimuovi il numero di pagina
\end_layout

\begin_layout Plain Layout


\backslash
begin{flushright}
\end_layout

\begin_layout Plain Layout

	
\backslash
textit{I wanted to make noise, not study theory.}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	James Hetfield
\end_layout

\begin_layout Plain Layout


\backslash
end{flushright}
\end_layout

\begin_layout Plain Layout


\backslash
restoregeometry % Ripristina i margini predefiniti
\end_layout

\begin_layout Plain Layout


\backslash
newpage % Passa alla pagina successiva
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduzione
\end_layout

\begin_layout Standard
Negli ultimi anni si è notato un trend sempre crescente nell'utilizzo di
 JavaScript per la creazione di applicazioni desktop
\begin_inset CommandInset citation
LatexCommand cite
key "rauch2012smashing"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Ci sono diversi fattori che hanno contribuito alla popolarità di JavaScript,
 primo fra tutti è che rappresenta il linguaggio standard, de facto, per
 l'implementazione di funzionalità dinamiche su pagine web.
 Nello specifico, JavaScript è l'unico linguaggio di scripting supportato
 nativamente da tutti i browser web moderni
\begin_inset CommandInset citation
LatexCommand cite
key "severance2012javascript"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Ci sono stati dei tentativi per introdurre alcune novità in questo ambito,
 seguendo principalmente due approcci:
\end_layout

\begin_layout Enumerate
l'inclusione di una nuova macchina virtuale all'interno di un browser web
 che supportasse un nuovo linguaggio
\end_layout

\begin_layout Enumerate
la realizzazione di un nuovo linguaggio ma eseguito sulla stessa macchina
 virtuale JavaScript già presente in un web browser
\end_layout

\begin_layout Standard
Ricade nella prima categoria VBScript di Microsoft, basato su Visual Basic,
 introdotto a metà degli anni '90, oggi non più supportato da nessun browser
 moderno.
\end_layout

\begin_layout Standard
Nella seconda categoria possiamo annoverare, più recentemente, TypeScript
\begin_inset CommandInset citation
LatexCommand cite
key "maharry2013typescript"
literal "true"

\end_inset

 (sempre di Microsoft), CoffeeScript e Dart (di Google).
 Questi linguaggi sono basati su un cosiddetto 
\emph on
transpiler
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "nicolini2023usage"
literal "true"

\end_inset

, ovvero un compilatore che prende in input il codice sorgente scritto ad
 esempio in TypeScript e lo converte in codice JavaScript, mantenendo le
 stesse funzionalità del codice originale.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Un altro punto di forza di JavaScript è la sua facilità di apprendimento
\begin_inset CommandInset citation
LatexCommand cite
key "abdulkareem2021evaluating"
literal "true"

\end_inset

, soprattutto rispetto ad altri linguaggi di programmazione più a basso
 livello come C o C++, permettendo agli sviluppatori di iniziare a scrivere
 codice più rapidamente, senza dover investire troppo tempo nell'apprendimento
 di una nuova tecnologia.
 Oggi, infatti, si assiste ad una quantità sempre crescente di librerie
 e framework per JavaScript, atti a semplificare lo sviluppo di applicazioni
 web complesse e a migliorarne la qualità, giusto per citarne alcuni: React,
 Angular, Vue.js, ma anche il più 
\emph on
anziano
\emph default
 jQuery.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Per questi ed altri motivi, durante la fine degli anni 2000, ci si è iniziati
 a porre una domanda: 
\begin_inset Quotes eld
\end_inset

è possibile eseguire codice JavaScript al di fuori del contesto web browser?
\begin_inset Quotes erd
\end_inset

.
 La risposta (affermativa) a questa domanda è stata la nascita di Node.js
\begin_inset CommandInset citation
LatexCommand cite
key "rauch2012smashing"
literal "true"

\end_inset

 che ha dato il via al paradigma del 
\emph on
JavaScript everywhere
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Del quale non mancano i detrattori
\end_layout

\end_inset

.
 Questo vuol dire, in estrema sintesi, poter utilizzare lo stesso linguaggio
 per creare applicazioni web, sia lato front-end sia lato back-end.
 In teoria si potrebbe così ridurre il tempo necessario per il processo
 di sviluppo di un'applicazione, riducendo il portfolio di tecnologie che
 un programmatore deve conoscere.
\end_layout

\begin_layout Standard
Nei primi anni 2010, quando Node.js iniziava a prendere piede, ci si è posti
 un'altra domanda: 
\begin_inset Quotes eld
\end_inset

è possibile scrivere e distribuire applicazioni desktop/mobile scritte in
 JavaScript?
\begin_inset Quotes erd
\end_inset

.
 La risposta, ancora una volta, è stata affermativa.
 Nasce Electron
\begin_inset CommandInset citation
LatexCommand cite
key "scott2020javascript"
literal "true"

\end_inset

: un framework open-source che consente agli sviluppatori di creare applicazioni
 desktop multi-piattaforma utilizzando tecnologie web standard come HTML,
 CSS e JavaScript.
 Dal lato mobile nascono tecnologie analoghe a Electron come Ionic, React
 Native e PhoneGap, tutte con obiettivi abbastanza simili.
 Man mano l'ecosistema JavaScript ha iniziato a diventare quello che Java
 era nei primi anni 2000
\begin_inset CommandInset citation
LatexCommand cite
key "kamthan1999java"
literal "true"

\end_inset

 per la scrittura di applicazioni desktop consumer multipiattaforma.
\end_layout

\begin_layout Standard
Il motivo principale dietro alla popolarità di questo ecosistema basato
 su JavaScript è la possibilità di utilizzare un'unica codebase (in JavaScript)
 che può essere eseguita su piattaforme molto diverse tra loro, problematica
 che è molto sentita nell'ambito mobile dove si hanno due piattaforme completame
nte diverse: Android e iOS
\begin_inset Foot
status open

\begin_layout Plain Layout
All'epoca della prima apparizione di queste tecnologie bisognava supportare
 anche Windows Phone
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Il trend di scrivere applicazioni in JavaScript è stato amplificato dalla
 crescente importanza del web come piattaforma per la distribuzione di applicazi
oni software.
 Software utilizzati quotidianamente da miliardi di utenti sono basati sul
 web e, per forza di cose, devono essere scritti in JavaScript.
\end_layout

\begin_layout Standard
Da qui la nascita delle cosiddette 
\emph on
Rich Internet Applications
\emph default
 (RIA)
\begin_inset CommandInset citation
LatexCommand cite
key "fraternali2010rich"
literal "true"

\end_inset

, ovvero applicazioni web che offrono un'esperienza utente interattiva e
 avanzata simile a quella di un'applicazione desktop tradizionale.
 Le RIA sono caratterizzate da una vasta gamma di funzionalità e interattività
 che le distinguono dalla semplici pagine web statiche.
 Oltre alla classica triade HTML + CSS + JavaScript, le RIA possono fare
 uso di tecnologie più avanzate e recenti come WebSockets, WebAudio, WebAssembly
, WebRTC, WebVR, WebGPU, Web Animations API.
 In sostanza il browser diventa un'interfaccia o un'astrazione della macchina
 sottostante, alla quale si può accedere utilizzando JavaScript.
\end_layout

\begin_layout Standard
Nello specifico WebAudio
\begin_inset CommandInset citation
LatexCommand cite
key "choi2018audioworklet"
literal "true"

\end_inset

 è un'API JavaScript avanzata che consente di manipolare e generare audio
 all'interno del browser.
 È stata progettata per consentire agli sviluppatori di creare RIA che includono
 funzionalità audio, come la registrazione, la riproduzione e l'elaborazione
 di suoni.
 L'API è basata su un'architettura a nodi, dove ognuno di essi rappresenta
 una singola operazione di elaborazione del suono.
 I nodi possono essere collegati tra loro per creare una catena di elaborazione,
 in cui il suono viene elaborato in successione da ogni nodo che attraversa.
 La manipolazione del suono avviene in real time.
 WebAudio è oggi supportato su tutti i browser recenti basati sugli engine
 JavaScript V8 e SpiderMonkey.
\end_layout

\begin_layout Standard
La necessità di scrivere applicazioni real time ha portato la necessità
 di dover eseguire codice ad alta efficienza, obiettivo non realizzabile
 completamente con un linguaggio interpretato quale JavaScript.
 Alla fine degli anni 2010 nasce quindi 
\emph on
WebAssembly
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "haas2017bringing"
literal "true"

\end_inset

 (Wasm): un formato di codice binario portabile che consente di eseguire
 codice di basso livello all'interno del browser web.
 È stato progettato per essere compatibile con i linguaggi di programmazione
 come C, C++ e Rust.
 In pratica, quindi, Wasm permette di creare applicazioni web che eseguono
 codice più velocemente e con maggiore efficienza rispetto a soluzioni basate
 su JavaScript.
 Wasm è stato pensato per essere altamente interoperabile con JavaScript:
 codice JavaScript può richiamare codice Wasm e viceversa, creando quindi
 soluzioni ibride che combinano il meglio di entrambi i mondi.
\end_layout

\begin_layout Standard
Sfruttando tutte queste tecnologie e un ecosistema ormai maturo, l'obiettivo
 di questa tesi è quello di discutere la realizzazione di un sistema per
 l'identificazione di audio: un utente sottopone uno spezzone di un brano
 audio di pochi secondi al sistema, il quale lo riconosce e può mostare
 all'utente informazioni ad esso correlate.
 L'intento, inoltre, è quello di eseguire l'algoritmo di identificazione
 su dispositivi eterogenei all'interno di un web browser, utilizzando Wasm
 e WebAudio.
 Questo presenta numerosi vantaggi, tra i più importanti si possono individuare:
\end_layout

\begin_layout Itemize
l'evitare all'utente il download di un'app addizionale, potendo sfruttare
 le funzionalità dell'algoritmo di riconoscimento direttamente dal suo web
 browser
\end_layout

\begin_layout Itemize
la notevole riduzione del carico lato server: grazie alla sua architettura
 distribuita, parte della complessità viene spostata sul dispositivo dell'utente
 finale, il quale porta a termine buona parte del processo di identificazione,
 rendendo possibile un'identificazione più veloce ed efficiente rispetto
 ad altre applicazioni simili
\end_layout

\begin_layout Standard
In definitiva, si renderà l'esperienza dell'utente ancora più piacevole
 e soddisfacente, mantenendo le stesse funzionalità e caratteristiche di
 una classica app eseguita nativamente su un dispositivo dell'utente.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Verrà discussa anche la realizzazione di una 
\emph on
second-screen application
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "holmes2012visual"
literal "true"

\end_inset

, ovvero un applicazione o servizio progettato per essere utilizzato su
 un dispositivo separato, come smartphone o tablet, mentre si fruisce un
 altro contenuto su un dispositivo di maggiore importanza, come la televisione
 o lo schermo di un PC.
 Queste applicazioni offrono un'esperienza interattiva e complementare al
 contenuto principale, arricchendo l'interazione dell'utente e fornendo
 ulteriori informazioni.
 Se si volesse tracciare l'origine di tali applicazioni, sicuramente la
 diffusione di tecnologie mobili, quali smartphone e tablet, ha sicuramente
 ricoperto un ruolo chiave nello sdoganare questo nuovo tipo di interattività.
\end_layout

\begin_layout Standard
Un esempio pionieristico delle second screen application è stato il programma
 televisivo 
\emph on
American Idol
\emph default
 negli Stati Uniti, che ha lanciato un'applicazione interattiva in grado
 di permettere agli spettatori di votare e interagire con il programma in
 tempo reale.
 Da allora, le second screen application sono diventate una parte comune
 dell'esperienza televisiva e offrono nuove opportunità per coinvolgere
 il pubblico e creare un'esperienza più interattiva e personalizzata.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Questo documento guiderà il lettore attraverso la realizzazione del sistema
 di identificazione tra i vari capitoli; saranno esaminate in maniera approfondi
ta le molteplici sfaccettature implementative, corredate da presentazione
 di dati e grafici, al fine di consentire una comprensione completa delle
 motivazioni che hanno guidato le scelte dell'autore.
\end_layout

\begin_layout Standard
Nei capitoli 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:La-libreria-fin"
plural "false"
caps "false"
noprefix "false"

\end_inset

 e 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:La-libreria-fin_db"
plural "false"
caps "false"
noprefix "false"

\end_inset

 verranno trattate le due librerie 
\emph on
fin
\emph default
 e 
\emph on
fin_db
\emph default
, che rappresentano le fondamenta del sistema, ovvero l'implementazione
 dell'algoritmo di estrazione delle features sonore e dell'identificazione
 dei brani.
\end_layout

\begin_layout Standard
Si passerà poi al capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-server_entry"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nel quale verrà analizzato l'eseguire responsabile di popolare il database
 con le features dei brani originali.
\end_layout

\begin_layout Standard
Il capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-server_rest"
plural "false"
caps "false"
noprefix "false"

\end_inset

 discuterà la realizzazione di un endpoint REST per effettuare l'identificazione
 di un segmento audio.
\end_layout

\begin_layout Standard
Nel capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-mock_client"
plural "false"
caps "false"
noprefix "false"

\end_inset

 verrà trattato un eseguibile utilizzato nelle fasi di testing.
\end_layout

\begin_layout Standard
La realizzazione della RIA occuperà il capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-wasm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
Nel capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-lyrics"
plural "false"
caps "false"
noprefix "false"

\end_inset

 verrà trattata la realizzazione di una 
\emph on
second-screen application
\emph default
 per la presentazione, in sincronia con un brano riprodotto, del testo del
 brano stesso, analizzando come questo tipo di applicazioni possano giovare
 delle soluzioni discusse in questo documento.
\end_layout

\begin_layout Standard
Il capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Confronto-con-OLAF"
plural "false"
caps "false"
noprefix "false"

\end_inset

 analizzerà le differenze e il funzionamento di un altro algoritmo concorrente
 open-source.
\end_layout

\begin_layout Standard
Infine, nel capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Utilizzi-futuri"
plural "false"
caps "false"
noprefix "false"

\end_inset

 verranno analizzati possibili utilizzi futuri del sistema qui presentato.
\end_layout

\begin_layout Section
Architettura generale
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/architettura_generale.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-architettura-generale"

\end_inset

Schema architettura generale
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'architettura di base del sistema (in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale"
plural "false"
caps "false"
noprefix "false"

\end_inset

), seppur ispirata al modello client/server, si discosta dalla tradizionale
 asimmetria tra i due attori, in cui il primo agisce come mero terminale
 passivo
\begin_inset Foot
status open

\begin_layout Plain Layout
In gergo tecnico è ciò che si definisce 
\emph on
dumb terminal
\end_layout

\end_inset

, limitandosi a interagire con l'API esposta dal server.
 La nuova soluzione adottata, invece, si propone di spostare parte della
 logica di business dal server al client, in un'ottica distribuita che avvicina
 la computazione all'utente e alleggerisce, al contempo, il carico sul server,
 riducendo così i costi correlati.
 Tale approccio innovativo sfrutta le risorse disponibili sui dispositivi
 dell'utente, aumentando la scalabilità del sistema e garantendo prestazioni
 elevate e una maggiore efficienza.
 Questa soluzione rappresenta un passo avanti nella progettazione di applicazion
i web computazionalmente onerose, fornendo un'esperienza utente potenzialmente
 più fluida e gradevole.
\end_layout

\begin_layout Subsection
Scomposizione dell'architettura
\end_layout

\begin_layout Standard
\noindent
L'architettura (in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale"
plural "false"
caps "false"
noprefix "false"

\end_inset

) può essere scomposta come segue:
\end_layout

\begin_layout Enumerate
Si inizia dai brani originali, la canzone nella sua interezza, salvata su
 una memoria di massa.
 La canzone è sottoposta ad una algoritmo di 
\emph on
fingerprinting
\emph default
, in cui vengono estratte alcune features
\begin_inset Foot
status open

\begin_layout Plain Layout
In seguito queste features prenderanno il nome di 
\emph on
Links
\end_layout

\end_inset

 caratterizzanti.
\end_layout

\begin_layout Enumerate
Le features estratte vengono memorizzate all'interno di un database insieme
 al nome della canzone alla quale appartengono.
\end_layout

\begin_layout Enumerate
Si immagini quindi che, ad un certo punto, un client voglia avviare il processo
 di riconoscimento di un brano: viene registrato uno spezzone audio di pochi
 secondi e viene innescata la stessa procedura di 
\emph on
fingerprinting
\emph default
 del punto 1 sul client, ma in questo caso le features estratte vengono
 inviate ad un endpoint REST.
\end_layout

\begin_layout Enumerate
Il server REST cerca di individuare delle similarità tra le features già
 presenti nel database e quelle appena inviategli dal client.
\end_layout

\begin_layout Enumerate
Se la ricerca ha successo, il server REST estrae dal database il nome della
 corrispondenza migliore.
\end_layout

\begin_layout Enumerate
Se la ricerca ha successo, il server REST invia al client il nome della
 corrispondenza migliore.
\end_layout

\begin_layout Standard
Si noti, anzitutto, che la parte più intensiva dal punto di vista computazionale
 è l'estrazione delle features, al contrario la ricerca delle similarità,
 sebbene impegnativa, non lo è quanto l'estrazione delle features stesse.
 In altre parole, il momento di maggior carico computazionale si verifica
 in due fasi:
\end_layout

\begin_layout Itemize

\emph on
Lato server
\emph default
: solo nella fase iniziale che porta al popolamento del database, durante
 l'analisi dei brani originali (ovvero fasi 1 e 2).
\end_layout

\begin_layout Itemize

\emph on
Lato client
\emph default
: nell'estrazione delle features della registrazione del brano da riconoscere.
\end_layout

\begin_layout Standard
In altre parole, l'operazione più onerosa per il server viene eseguita una
 sola volta: all'atto del fingerprinting dei brani originali.
 Sarà poi il client a farsi carico dell'operazione di fingerprinting per
 l'identificazione del singolo brano.
\end_layout

\begin_layout Standard
Il server REST ha una duplice funzione:
\end_layout

\begin_layout Itemize
Presentare i dati nel formato corretto sia lato client che lato database,
 fungendo quindi da una sorta di relay e disaccoppiando la rappresentazione
 interna dei dati a quella esposta al client.
\end_layout

\begin_layout Itemize
Individuare similarità con le features già presenti nel database.
\end_layout

\begin_layout Standard
L'intero sistema verrà descritto in modo più dettagliato e rigoroso nei
 capitoli successivi.
\end_layout

\begin_layout Section
Organizzazione del codice
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/organizzazione_codice.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Organizzazione-codice"

\end_inset

Schema organizzazione codice
\end_layout

\end_inset


\end_layout

\end_inset

Il codice sorgente del sistema è suddiviso nei seguenti componenti (figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Organizzazione-codice"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\end_layout

\begin_layout Itemize
La libreria 
\emph on
fin
\emph default
, deputata all'estrazione delle features (ovvero fare 
\emph on
fingerprinting
\emph default
) dei brani in esame.
\end_layout

\begin_layout Itemize
La libreria 
\emph on
fin_db
\emph default
 preposta all'interazione con il database, svolgendo i compiti di inserimento
 e ricerca delle features.
 Dipende da 
\emph on
fin
\emph default
.
\end_layout

\begin_layout Itemize
L'eseguibile 
\emph on
mock_client
\emph default
, riservato esclusivamente ad attività di testing, il quale riceve in input
 un segmento noto di un brano, al fine di verificare la corretta identificazione
 del brano stesso.
 Dipende da entrambe le librerie.
\end_layout

\begin_layout Itemize
L'eseguibile 
\emph on
server_entry
\emph default
,
\emph on
 
\emph default
in grado di elaborare i brani completi per estrarne le features, per poi
 memorizzarle nel database insieme al nome del brano associato.
 Dipende da entrambe le librerie.
\end_layout

\begin_layout Itemize
L'eseguibile
\emph on
 server_rest
\emph default
 che espone l'endpoint REST per l'individuazione dei brani: riceve le features
 del segmento audio estratte dal client, effettua una ricerca di un brano
 compatibile all'interno del database e, in caso di esito positivo, restituisce
 al client il nome del brano individuato.
 Dipende da entrambe le librerie.
\end_layout

\begin_layout Itemize
L'eseguibile
\begin_inset Foot
status open

\begin_layout Plain Layout
In realtà l'eseguibile è la RIA, contenente HTML, il modulo Wasm e il codice
 JavaScript necessario al caricamento del modulo Wasm
\end_layout

\end_inset

 
\emph on
wasm_client
\emph default
, ovvero il client, in grado di acquisire il segmento audio tramite microfono
 del client, estraendone le features per poi inviarle a 
\emph on
server_rest
\emph default
.
\end_layout

\begin_layout Itemize
L'eseguibile
\begin_inset Foot
status open

\begin_layout Plain Layout
Anche in questo caso si ha a che fare con una RIA
\end_layout

\end_inset

 
\emph on
lyrics
\emph default
, costruito sulla base di wasm_client, aggiunge la possibilità di visualizzare
 il testo sincronizzato (in tempo reale) del brano riconosciuto.
 
\end_layout

\begin_layout Standard
Successivamente, nei prossimi capitoli, verranno esaminate in dettaglio
 le specifiche funzionalità di ciascun componente sopracitato.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:La-libreria-fin"

\end_inset

La libreria fin
\end_layout

\begin_layout Standard
La libreria 
\emph on
fin
\emph default
 è il componente principale del sistema e ha il compito di estrarre le features
 caratterizzanti di un brano, garantendo il più possibile, che audio simili
 abbiano features simili.
 D'ora in avanti ci si riferirà alle features indicandole come 
\emph on
Links
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/fin_architettura.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Architettura-fin"

\end_inset

Schema architettura libreria fin
\end_layout

\end_inset


\end_layout

\end_inset

Il punto di ingresso della libreria è un 
\emph on
Reader
\emph default
, ovvero un contenitore dei campioni che compongono un audio; in uscita
 si hanno i 
\emph on
Links
\emph default
 che caratterizzano quell'audio.
 Analizzando più dettagliatamente lo schema in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architettura-fin"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Enumerate

\series bold
Reader
\series default
 è una classe astratta del namespace 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

readers
\end_layout

\end_inset

, è la rappresentazione di un audio nel dominio del tempo.
 La classe definisce un metodo virtuale puro 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

getData()
\end_layout

\end_inset

 che restituisce i campioni dell'audio.
\end_layout

\begin_layout Enumerate

\series bold
Spectrogram
\series default
 è una classe del namespace 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

math
\end_layout

\end_inset

, rappresenta lo spettrogramma di un audio.
 Riceve i campioni dal 
\emph on
Reader
\emph default
 e procede come segue:
\end_layout

\begin_deeper
\begin_layout Enumerate
Finestra il segnale ottenendone un segmento.
\end_layout

\begin_layout Enumerate
Calcola la DFT per ogni segmento.
\end_layout

\begin_layout Enumerate
Calcola il modulo dell'output della DFT per ogni segmento.
\end_layout

\begin_layout Enumerate
Salva il risultato del punto precedente in una struttura chiamata 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fftWindow
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Le varie 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fftWindow
\end_layout

\end_inset

 compongono lo spettrogramma, in altre parole una rappresentazione nel tempo
 del contenuto in frequenza dell'audio.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
findPeaks
\series default
 è una funzione nel namespace 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

core
\end_layout

\end_inset

 che estrae i picchi più intensi
\begin_inset Foot
status open

\begin_layout Plain Layout
Nonché i più significativi per il sistema in analisi
\end_layout

\end_inset

 dallo spettrogramma.
 Ogni picco è rappresentato da un oggetto 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Peak
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
i 
\series bold
Links 
\series default
sono il risultato dell'operazione di 
\emph on
fingerprinting
\emph default
, ovvero le features che caratterizzano l'audio, sono definiti nel namespace
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

core
\end_layout

\end_inset

.
 Vengono creati a partire dai vari 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Peak
\end_layout

\end_inset

 estratti da 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

findPeaks
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Tutte le classi e le funzioni della libreria 
\emph on
fin
\emph default
 sono contenute nel namespace 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fin
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:La-classe-Reader"

\end_inset

La classe Reader e le sue sottoclassi
\end_layout

\begin_layout Standard
La classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Reader
\end_layout

\end_inset

 generica rappresenta un contenitore di campioni audio.
 Definisce due metodi puri virtuali:
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

getData()
\end_layout

\end_inset

 che ritorna un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::vector<float>
\end_layout

\end_inset

 contenente i campioni.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

dropSamples()
\end_layout

\end_inset

 che svuota il 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

vector
\end_layout

\end_inset

 dei campioni.
\end_layout

\begin_layout Standard
\begin_inset Float marginfigure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/readers.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "mar:Ereditarieta-readers"

\end_inset

Schema ereditarietà tra readers
\end_layout

\end_inset


\end_layout

\end_inset

La classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Reader
\end_layout

\end_inset

 viene estesa da due classi 
\emph on
reader
\emph default
 concrete (vedi figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "mar:Ereditarieta-readers"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

WavReader
\end_layout

\end_inset

, in grado di leggere i file Wave.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

DummyReader
\end_layout

\end_inset

, un mero wrapper attorno al contenitore 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::vector
\end_layout

\end_inset

, con un metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

addSamples
\end_layout

\end_inset

 per inserire nuovi samples nel vettore.
\end_layout

\begin_layout Section
Lo spettrogramma
\end_layout

\begin_layout Standard
Lo 
\emph on
spettrogramma
\emph default
 è una rappresentazione tridimensionale del contenuto in frequenza di un
 segnale nel tempo.
 Questa rappresentazione di un segnale audio viene calcolata e memorizzata
 all'interno della classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Spectrogram
\end_layout

\end_inset

 del namespace 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

math
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Il costruttore riceve in input come parametro un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::vector<float>
\end_layout

\end_inset

 di campioni nel dominio del tempo dell'audio da analizzare: il primo passo
 da compiere è 
\emph on
finestrare il segnale
\emph default
.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:La-finestratura"

\end_inset

La finestratura
\end_layout

\begin_layout Standard
\begin_inset Float marginfigure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		domain=0:.08,
\end_layout

\begin_layout Plain Layout

		samples=100,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = .08,
\end_layout

\begin_layout Plain Layout

		ymin =  -2, ymax = 2,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = tempo $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = ampiezza,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[color=red,mark=x] coordinates { (0,1) (0.02,1) };
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[color=red,mark=x] coordinates { (0.02,0) (0.1,0) };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=green,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*120*x))/2 - sin(deg(pi*60*x))/3 - sin(deg(pi*20*x))/6
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "mar:Finestratura-con-finestra"

\end_inset

Finestratura con finestra rettangolare
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il primo passo per ottenere uno spettrogramma è finestrare il segnale
\begin_inset CommandInset citation
LatexCommand cite
key "podder2014comparative"
literal "true"

\end_inset

: il caso più semplice consiste nel utilizzare una finestra rettangolare
 come indicato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "mar:Finestratura-con-finestra"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
L'utilizzo di una 
\emph on
funzione finestra
\emph default
, tuttavia, porta al fenomeno dello 
\emph on
spectral leakage
\emph default
, ovvero la comparsa nello spettro di nuove frequenze che non esistono realmente
 nello spettro del segnale audio originale.
 Nello specifico, l'energia di un picco di frequenza confluisce parzialmente
 nelle frequenze vicine (da cui il termine 
\emph on
leakage
\emph default
), 
\emph on
sporcando
\emph default
 la rappresentazione dello spettrogramma.
\end_layout

\begin_layout Standard
Lo 
\emph on
spectral leakage
\emph default
 non può essere del tutto evitato, ma può essere tenuto sotto controllo
 e ridotto utilizzando una funzione finestra più complessa rispetto a quella
 rettangolare.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La scelta della finestra implica un trade-off tra la 
\emph on
risoluzione spettrale
\emph default
 e il 
\emph on
range dinamico
\emph default
 del sistema.
 Infatti, l'utilizzo di una finestra con banda passante stretta consente
 di ottenere una maggiore risoluzione spettrale, ovvero di distinguere frequenze
 molto vicine tra loro, ma allo stesso tempo comporta una riduzione del
 range dinamico del sistema, ovvero della capacità di distinguere segnali
 di ampiezza molto differente tra loro.
 Al contrario, l'utilizzo di una finestra con banda passante ampia, comporta
 una maggiore sensibilità ai segnali con un ampio range dinamico, ma al
 costo di una riduzione della risoluzione spettrale.
\end_layout

\begin_layout Standard
Inoltre, è importante considerare che la scelta della finestra deve essere
 fatta in base alle specifiche caratteristiche del segnale che si intende
 analizzare, come ad esempio la presenza di rumore o la distribuzione di
 energia spettrale.
 Pertanto, la scelta dev'essere attentamente valutata in base alle esigenze
 specifiche dell'applicazione.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Il vantaggio principale della 
\emph on
finestra rettangolare
\emph default
 è la sua risposta in frequenza piatta, risultando quindi la migliore in
 termini di risoluzione spettrale.
 Tuttavia, la finestra rettangolare ha una bassa attenuazione laterale,
 ovvero non è in grado di attenuare il rumore presente nelle frequenze circostan
ti, il che limita il suo range dinamico.
\end_layout

\begin_layout Standard
Per ovviare a questo problema, sono state sviluppate altre finestre, come
 quelle di 
\emph on
Blackman
\emph default
 e 
\emph on
Hann
\emph default
.
 La finestra di 
\emph on
Hann
\emph default
 è una scelta intermedia tra la finestra
\emph on
 rettangolare
\emph default
 e la finestra di 
\emph on
Blackman
\emph default
.
 Infatti, la finestra di 
\emph on
Hann
\emph default
 presenta una risoluzione spettrale inferiore rispetto alla finestra 
\emph on
rettangolare
\emph default
 ma un range dinamico migliore.
 La finestra di 
\emph on
Blackman
\emph default
, invece, è la scelta migliore in termini di range dinamico, poiché, tra
 quelle citate, è quella che riduce maggiormente la diffusione dell'energia
 in altre frequenze vicine.
 Tuttavia, la sua risoluzione spettrale è la peggiore.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La scelta della finestra da utilizzare dipende dalle caratteristiche del
 segnale e degli obiettivi dell'analisi.
 In questo caso di studio si avrà a che fare potenzialmente con un segnale
 rumoroso, quindi si è portati ad utilizzare la finestra di 
\emph on
Blackman
\emph default
.
 D'altro canto, però, si deve considerare che, anticipando il contenuto
 dei prossimi paragrafi, l'estrazione dei Links risulta migliore tanto migliore
 è l'analisi in frequenza del segnale e, quindi, si dovrebbe prediligere
 la massima risoluzione spettrale, individuando con precisione le componenti
 di frequenza presenti nel segnale, a discapito del range dinamico.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={SNR ($dB$)},
\end_layout

\begin_layout Plain Layout

	ylabel={Recognition rate},
\end_layout

\begin_layout Plain Layout

	legend pos=south east,
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
addplot table [x=db, y=blackman, col sep=comma] {data/windows_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{Blackman}
\end_layout

\begin_layout Plain Layout


\backslash
addplot table [x=db, y=hann, col sep=comma] {data/windows_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{Hann}
\end_layout

\begin_layout Plain Layout


\backslash
addplot table [x=db, y=rectangular, col sep=comma] {data/windows_success_rate.csv
};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{Rettangolare}
\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Recognition-rate-in"

\end_inset

Recognition rate in funzione dell'SNR per le varie finestre
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

A questo punto risulta necessario valutare 
\emph on
sul campo 
\emph default
le performance di queste finestre.
 Per questo motivo è stato predisposto un 
\emph on
ambiente di test
\emph default
 composto da circa 500 brani di generi molto diversi tra loro
\begin_inset Foot
status open

\begin_layout Plain Layout
I generi inclusi sono stati il metal, il rock, il blues e la musica classica
\end_layout

\end_inset

 e per ognuno di questi brani:
\end_layout

\begin_layout Enumerate
è stato estratto un segmento di pochi secondi.
\end_layout

\begin_layout Enumerate
il segmento è stato distorto, sommando del rumore non bianco e introducendo
 del clipping.
\end_layout

\begin_layout Enumerate
nota l'energia del segmento del segnale, è stato sommato un rumore per ottenere
 un SNR target.
\end_layout

\begin_layout Standard
Si è quindi fatto variare, per ogni brano, l'SNR tra 
\begin_inset Formula $-40dB$
\end_inset

 e 
\begin_inset Formula $+40dB$
\end_inset

 con passo di 
\begin_inset Formula $1dB$
\end_inset

, per le tre finestre considerate, contando quante volte l'algoritmo fosse
 in grado di individuare il brano correttamente: si è ottenuto il grafico
 in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Recognition-rate-in"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Analizzando dal grafico le prestazioni delle finestre di Hann, rettangolare
 e di Blackman, si può notare che:
\end_layout

\begin_layout Itemize
per un SNR fino a 
\begin_inset Formula $-15dB$
\end_inset

 la finestra con le performances migliori è quella di Hann.
\end_layout

\begin_layout Itemize
nel tratto tra 
\begin_inset Formula $-15dB$
\end_inset

 in poi la finestra rettangolare e quella di Hann sono comparabili.
\end_layout

\begin_layout Itemize
l'utilizzo della finestra di Blackman si traduce in un recognition rate
 sempre minore o di quello della finestra di Hann o di quella rettangolare.
\end_layout

\begin_layout Standard
L'efficacia della finestra di Hann rispetto alle altre due è quindi dimostrata.
 Tuttavia, non esiste una finestra 
\emph on
migliore
\emph default
 in assoluto e la scelta della finestra più adatta dipende dalle specifiche
 del problema in esame.
 Nel caso in analisi la finestra di Hann è stata selezionata poiché ha ottenuto
 complessivamente le performance migliori, raggiungendo mediamente il 
\emph on
recognition rate 
\emph default
più alto.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La libreria fin finestra il segnale audio con un overlap
\begin_inset CommandInset citation
LatexCommand cite
key "trethewey2000window"
literal "true"

\end_inset

 del 
\begin_inset Formula $50\%$
\end_inset

 (vedi figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Audio-windowing-with-overlap"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Questa scelta è dovuta a due motivi:
\end_layout

\begin_layout Enumerate
Sopperire all'attenuazione agli estremi della finestra introdotti dalla
 funzione finestra di Hann.
\end_layout

\begin_layout Enumerate
Analizzare meglio il contenuto in frequenza a cavallo tra due finestre se
 non si usa overlap.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		samples=200,
\end_layout

\begin_layout Plain Layout

		domain=0:10,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 10,
\end_layout

\begin_layout Plain Layout

		ymin = -1, ymax = 1,
\end_layout

\begin_layout Plain Layout

		xlabel = tempo $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = ampiezza
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (0,0) rectangle (10,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (10,0) rectangle (20,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (20,0) rectangle (30,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (30,0) rectangle (40,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (40,0) rectangle (50,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (50,0) rectangle (60,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (60,0) rectangle (70,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (70,0) rectangle (80,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (80,0) rectangle (90,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick, fill=red, fill opacity=0.2] (90,0) rectangle (100,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (5,0) rectangle (15,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (15,0) rectangle (25,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (25,0) rectangle (35,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (35,0) rectangle (45,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (45,0) rectangle (55,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (55,0) rectangle (65,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (65,0) rectangle (75,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (75,0) rectangle (85,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (85,0) rectangle (95,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			blue,
\end_layout

\begin_layout Plain Layout

			smooth
\end_layout

\begin_layout Plain Layout

		]
\end_layout

\begin_layout Plain Layout

		{(0.3*gauss(0,0.2) + 0.5*rand) * sin(deg(x)) * 2};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
\begin_inset CommandInset label
LatexCommand label
name "fig:Audio-windowing-with-overlap"

\end_inset

Finestratura audio con overlap
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
La DFT
\end_layout

\begin_layout Standard
La 
\emph on
trasformata di Fourier discreta 
\emph default
viene calcolata facendo ricorso alla libreria 
\series bold
fftw
\series default

\begin_inset Foot
status open

\begin_layout Plain Layout
Reperibile all'indirizzo 
\begin_inset CommandInset href
LatexCommand href
name "https://www.fftw.org/"
target "https://www.fftw.org/"
literal "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In prima analisi è necessario introdurre il concetto di 
\emph on
risoluzione spettrale
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "briggs1995dft"
literal "true"

\end_inset


\emph on
, 
\emph default
ossia la capacità di un'analisi spettrale di distinguere due componenti
 di frequenza vicine (nel dominio della frequenza).
 Dipende dal numero di campioni utilizzati nella finestra e dalla finestra
 utilizzata
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedere paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:La-finestratura"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sulla risoluzione spettrale delle finestre
\end_layout

\end_inset

.
 La 
\emph on
risoluzione in frequenza
\emph default
 della DFT può essere calcolata come segue:
\begin_inset Formula 
\begin{equation}
\Delta f=\frac{F_{S}}{N}\label{eq:risoluzione-freq}
\end{equation}

\end_inset

Dove:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\Delta f$
\end_inset

 è la 
\emph on
risoluzione spettrale
\emph default
, anche detta 
\emph on
dimensione del bin di frequenze.
\end_layout

\begin_layout Itemize
\begin_inset Formula $F_{S}$
\end_inset

 è la 
\emph on
frequenza di campionamento.
\end_layout

\begin_layout Itemize
\begin_inset Formula $N$
\end_inset

 sono il numero di campioni in una finestra.
\end_layout

\begin_layout Standard
Se si guarda alla definizione di DFT di seguito
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{aligned}X[n]:= & \sum_{k=0}^{N-1}x[k]e^{-i\frac{2\pi kn}{N}}\end{aligned}
\label{eq:def_dft}
\end{equation}

\end_inset

dove 
\begin_inset Formula $N$
\end_inset

 rappresenta ancora il numero di campioni della finestra, si può facilmente
 notare che per calcolare il bin n-esimo bisognerà eseguire 
\begin_inset Formula $N$
\end_inset

 addizioni e 
\begin_inset Formula $N$
\end_inset

 moltiplicazioni (quindi 
\begin_inset Formula $2N$
\end_inset

 operazioni in totale).
 Di conseguenza, ottenere 
\begin_inset Formula $N$
\end_inset

 bins vuol dire eseguire 
\begin_inset Formula $2N^{2}$
\end_inset

 operazioni in virgola mobile: una complessità non indifferente (pari a
 
\begin_inset Formula $\mathcal{O}(N^{2})$
\end_inset

).
\end_layout

\begin_layout Standard
Fortunatamente esistono implementazioni più efficienti della DFT che prendono
 il nome di FFT (Fast Fourier Transforms).
 Queste implementazioni, come ad esempio fftw, hanno una complessità di
 solo 
\begin_inset Formula $\mathcal{O}(N\log N)$
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "frigo2005design"
literal "true"

\end_inset

.
 Le complessità della DFT e della FFT sono visibili nel grafico 
\begin_inset CommandInset ref
LatexCommand ref
reference "mar:Complessita-dft-fft"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		domain=0:4096,
\end_layout

\begin_layout Plain Layout

		samples=100,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 4096,
\end_layout

\begin_layout Plain Layout

		ymin =  0,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = Dimensione finestra $(N)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Complessità,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		ymode=log,
\end_layout

\begin_layout Plain Layout

		legend style={at={(0.02,0.98)},anchor=north west,draw=none},
\end_layout

\begin_layout Plain Layout

		legend cell align={left}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=red,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			x^2
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

		
\backslash
addlegendentry{DFT};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=green,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			x*log10(x)
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

		
\backslash
addlegendentry{FFT};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\lang italian

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "mar:Complessita-dft-fft"

\end_inset

Complessità DFT e FFT
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La libreria fin è configurata per trattare segnali audio campionati a 
\begin_inset Formula $8000Hz$
\end_inset

, utilizzando finestre di dimensione pari a 
\begin_inset Formula $512$
\end_inset

 campioni, quindi usando la 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:risoluzione-freq"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
\Delta f=\frac{8000Hz}{512}=15.625Hz
\]

\end_inset


\end_layout

\begin_layout Standard
È importante considerare un altro aspetto: nonostante l'incrementare la
 dimensione della finestra migliori la risoluzione in frequenza (permettendo
 di avere bin più 
\emph on
stretti
\emph default
), viene incrementato anche il numero di operazioni che compongono la FFT,
 essendo dipendente da 
\begin_inset Formula $N$
\end_inset

.
\end_layout

\begin_layout Standard
Allo stesso tempo, tuttavia, sarebbe controproducente usare una frequenza
 di campionamento del segnale pari a 
\begin_inset Formula $44100Hz$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
La frequenza standard per il campionamento audio
\end_layout

\end_inset

, in quanto questo porterebbe ad avere una risoluzione in frequenza molto
 bassa
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $\Delta f=\frac{44100Hz}{512}\cong86Hz$
\end_inset


\end_layout

\end_inset

.
 La soluzione consiste nel fare 
\emph on
downsampling, 
\emph default
ovvero
\emph on
 
\emph default
abbassare la frequenza di campionamento del segnale, in questo caso a 
\begin_inset Formula $8000Hz$
\end_inset

.
 L'unica differenza sarà che il segnale ricampionato avrà, al massimo, un
 contenuto in frequenza tra gli 
\begin_inset Formula $0Hz$
\end_inset

 e i 
\begin_inset Formula $4000Hz$
\end_inset

 circa, tuttavia questo non rappresenta un problema: la parte 
\emph on
più significativa
\emph default
 del segnale, ovvero le frequenze più basse, è ancora presente.
\end_layout

\begin_layout Standard
In questo modo quindi si riduce la complessità di un fattore 
\begin_inset Formula $\alpha$
\end_inset

 pari a:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\alpha=\frac{N^{2}}{N\log N}=\frac{N}{\log N}
\]

\end_inset

Il tutto mantenendo la risoluzione in frequenza ragionevolmente bassa.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Inoltre, è necessario fare alcune osservazioni aggiuntive
\begin_inset CommandInset citation
LatexCommand cite
key "briggs1995dft"
literal "true"

\end_inset

:
\end_layout

\begin_layout Enumerate
Il primo bin non contiene informazioni rilevanti riguardo la rappresentazione
 in frequenza del segnale.
\end_layout

\begin_layout Enumerate
L'output della DFT su segnali reali è simmetrico.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

A dimostrazione del primo fatto si può partire dalla definizione della DFT
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:def_dft"
plural "false"
caps "false"
noprefix "false"

\end_inset

 e valutarla in 
\begin_inset Formula $n=0$
\end_inset

:
\begin_inset Formula 
\[
\begin{aligned}X[n]|_{n=0}:= & \sum_{k=0}^{N-1}x[k]e^{-i\frac{2\pi kn}{N}}|_{n=0}\\
= & \sum_{k=0}^{N-1}x[k]e^{0}\\
= & \sum_{k=0}^{N-1}x[k]
\end{aligned}
\]

\end_inset

In altre parole, il primo bin dell'output della DFT corrisponde alla 
\emph on
componente DC 
\emph default
del segnale in ingresso che può essere assunto pari a 
\begin_inset Formula $0$
\end_inset

 e quindi ignorato nel caso di segnali audio.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Per quanto riguarda il secondo fatto, si deve dimostrare che se 
\begin_inset Formula $x[n]$
\end_inset

 è un segnale a valori reali allora:
\begin_inset Formula 
\begin{equation}
X[N-n]=X^{*}[n]\label{eq:simmetria_dft}
\end{equation}

\end_inset

dove:
\end_layout

\begin_layout Itemize
\begin_inset Formula $X[\astrosun]$
\end_inset

 è l'output della DFT applicata a 
\begin_inset Formula $x[n]$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $(\astrosun)^{*}$
\end_inset

 denota il coniugato di 
\begin_inset Formula $\astrosun$
\end_inset

 
\end_layout

\begin_layout Standard
Partendo dalla 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:simmetria_dft"
plural "false"
caps "false"
noprefix "false"

\end_inset

, si sostituisce 
\begin_inset Formula $n$
\end_inset

 con 
\begin_inset Formula $N-n$
\end_inset

 nella definizione della DFT 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:def_dft"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Formula 
\[
\begin{aligned}X[N-n]:= & \sum_{k=0}^{N-1}x[k]e^{-i\frac{2\pi k(N-n)}{N}}\\
= & \sum_{k=0}^{N-1}x[k]\underbrace{e^{-i2\pi k}}_{1\forall k}e^{i\frac{2\pi kn}{N}}\\
= & \sum_{k=0}^{N-1}x[k]e^{i\frac{2\pi kn}{N}}\\
= & \left(\sum_{k=0}^{N-1}x[k]e^{-i\frac{2\pi kn}{N}}\right)^{*}\\
= & X^{*}[n]
\end{aligned}
\]

\end_inset

Dove il passaggio al coniugato è invariante per 
\begin_inset Formula $x[k]$
\end_inset

 dato che è a valori reali.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Le due precedenti considerazioni permettono quindi all'algoritmo di lavorare
 in maniera più efficiente, escludendo la componente DC dai calcoli ed impiegand
o una versione ottimizzata della FFT per input reali, con soli 
\begin_inset Formula $\frac{N}{2}-1$
\end_inset

 coefficienti utili in output, dimezzando di fatto la complessità.
\end_layout

\begin_layout Subsection
Il modulo dello spettrogramma e le 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fftWindow
\end_layout

\end_inset

s
\end_layout

\begin_layout Standard
L'output della DFT è un vettore di 
\begin_inset Formula $\frac{N}{2}-1$
\end_inset

 numeri complessi, ma l'algoritmo necessita solo del loro modulo in 
\begin_inset Formula $dB$
\end_inset

, calcolato come:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
20\log_{10}\sqrt{a^{2}+b^{2}}=10\log_{10}\left(a^{2}+b^{2}\right)
\]

\end_inset

Dove 
\begin_inset Formula $a$
\end_inset

 e 
\begin_inset Formula $b$
\end_inset

 sono rispettivamente la parte reale e immaginaria del numero complesso.
\end_layout

\begin_layout Standard
I vari moduli, per ogni finestra considerata, vengono memorizzati all'interno
 di un oggetto 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fftWindow
\end_layout

\end_inset

.
 Ogni 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fftWindow
\end_layout

\end_inset

 viene inserita in un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::vector
\end_layout

\end_inset

 che verrà utilizzato dalla funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

findPeaks
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:I-Peaks"

\end_inset

I Peaks
\end_layout

\begin_layout Standard
Pronto lo spettrogramma, lo si deve processare per ottenere i picchi di
 frequenze più significativi e scartare tutto il resto: questo permette
 di avere una prima rappresentazione più compatta del segnale audio.
\end_layout

\begin_layout Standard
Lo spettrogramma è diviso in una sorta di griglia, in cui ogni cella ha
 le seguenti dimensioni:
\end_layout

\begin_layout Itemize
Larghezza pari a 
\begin_inset Formula $C$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Definita nel file 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

consts.h
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Altezza pari ad un range di frequenze, chiamato 
\emph on
banda.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Tempo $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequenza $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=blue, line width=1pt] (0,0)
 rectangle (40,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=blue, line width=1pt] (40,0)
 rectangle (80,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=blue, line width=1pt] (80,0)
 rectangle (120,100);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=green, line width=1pt] (0,100)
 rectangle (40,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=green, line width=1pt] (40,100)
 rectangle (80,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=green, line width=1pt] (80,100)
 rectangle (120,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=red, line width=1pt] (0,200)
 rectangle (40,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=red, line width=1pt] (40,200)
 rectangle (80,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=red, line width=1pt] (80,200)
 rectangle (120,300);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=orange, line width=1pt] (0,300)
 rectangle (40,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=orange, line width=1pt] (40,300)
 rectangle (80,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=orange, line width=1pt] (80,300)
 rectangle (120,400);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[decoration={brace,mirror,raise=15pt},decorate]   (0,0) -- node[below=16pt]
 {
\backslash
textbf{C}} (2.9,0);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[decoration={brace,mirror},decorate]   (9.7,0) -- node[xshift=10pt] {
\backslash
rotatebox{-90}{
\backslash
textbf{banda}}} (9.7,1.4);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
\begin_inset CommandInset label
LatexCommand label
name "fig:Spectrum-division"

\end_inset


\lang italian
Suddivisione
\lang english
 
\lang italian
dello
\lang english
 
\lang italian
spettro
\lang english
 (
\lang italian
ogni
\lang english
 
\lang italian
colore
\lang english
 
\lang italian
è
\lang english
 
\lang italian
una
\lang english
 
\lang italian
banda
\lang english
)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Si prenda la suddivisione semplificata della figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Spectrum-division"
plural "false"
caps "false"
noprefix "false"

\end_inset

 dove:
\end_layout

\begin_layout Itemize
\begin_inset Formula $C=4$
\end_inset

.
\end_layout

\begin_layout Itemize
La banda ha dimensione fissa pari a 
\begin_inset Formula $100Hz$
\end_inset

.
\end_layout

\begin_layout Standard
Nell'algoritmo questi parametri sono scelti diversamente: 
\begin_inset Formula $C$
\end_inset

 è uguale a 
\begin_inset Formula $32$
\end_inset

 (vedere 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scelta-di-c"
plural "false"
caps "false"
noprefix "false"

\end_inset

) e la suddivisione in bande segue una scala logaritmica (vedere 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scelta-della-dimensione"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Per ogni cella, attraverso la funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

findPeaksInWindow
\end_layout

\end_inset

 definita nel file 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

peaks_finder.cpp
\end_layout

\end_inset

, l'algoritmo individua e memorizza le 
\begin_inset Formula $3$
\end_inset

 frequenze
\begin_inset Foot
status open

\begin_layout Plain Layout
Costante 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

N_PEAKS
\end_layout

\end_inset

 in 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

consts.h
\end_layout

\end_inset


\end_layout

\end_inset

 più prominenti.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Tempo $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequenza $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, line width=1pt] (0,0) rectangle (40,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, line width=1pt] (40,0) rectangle (80,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, line width=1pt] (80,0) rectangle (120,100);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[green, line width=1pt] (0,100) rectangle (40,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[green, line width=1pt] (40,100) rectangle (80,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[green, line width=1pt] (80,100) rectangle (120,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[red, line width=1pt] (0,200) rectangle (40,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[red, line width=1pt] (40,200) rectangle (80,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[red, line width=1pt] (80,200) rectangle (120,300);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[orange, line width=1pt] (0,300) rectangle (40,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[orange, line width=1pt] (40,300) rectangle (80,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[orange, line width=1pt] (80,300) rectangle (120,400);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 0.745560224337 , 378.5992651
97 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 3.35149848633 , 885.69642912
8 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 1.36552968092 , 687.79506248
 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.73052621593 , 1521.618562
76 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.24021149438 , 1286.762539
77 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.31025446998 , 1759.585072
66 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 0.367038182557 , 2640.0077863
8 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.60223704132 , 2543.51959691
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 3.29030455474 , 2857.42356211
 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 3.06012887649 , 3859.57073
579 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 1.04281482521 , 3310.98256
132 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 0.342092598793 ,
 3187.00295803 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 6.13965840628 , 346.37314184
4 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 6.18220033666 , 151.14467838
3 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 5.10152863505 , 640.55570001
8 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.25598325224 , 1797.769092
61 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 7.08091233708 , 1668.626795
36 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 5.30064456137 , 1131.850638
39 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.2544573697 , 2751.61392809
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.8872104256 , 2267.19959314
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.45001350539 , 2289.19953153
 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.64148867695 , 3139.99246
694 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.80868333293 , 3160.84633
384 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 4.68927142292 , 3263.16366
007 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.50986878705 , 653.82012721
1 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.94884609281 , 539.46336189
3 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.44637953657 , 707.94351178
6 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.49315824083 , 1563.597638
99 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.74759745215 , 1888.112335
31 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 10.7844077137 , 1477.871231
18 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.899479235 , 2856.56308609
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 9.50730112412 , 2796.10602412
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 11.6806723738 , 2173.69277417
 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.28333255686 , 3800.01058
487 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.87529616782 , 3162.85741
608 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.5805497799 , 3704.10829
642 ) }; 
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
\begin_inset CommandInset label
LatexCommand label
name "fig:Three-points-per"

\end_inset


\lang italian
Spettrogramma
\lang english
 con 
\begin_inset Formula $3$
\end_inset

 
\lang italian
picchi
\lang english
 per cella
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

findPeaks
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Sempre in 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

peaks_finder.cpp
\end_layout

\end_inset


\end_layout

\end_inset

 si occupa di dividere lo spettro in celle, per ogni cella richiama 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

findPeaksInWindow
\end_layout

\end_inset

 e ne memorizza il risultato, ottenendo qualcosa di simile a quanto visibile
 in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Three-points-per"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Alla fine dell'esecuzione di 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

findPeaks
\end_layout

\end_inset

 sarà disponibile un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::vector<Peak>
\end_layout

\end_inset

 ordinato per intensità del picco.
 Questi picchi verranno utilizzati in seguito per creare i 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Link
\end_layout

\end_inset

s.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scelta-della-dimensione"

\end_inset

Scelta della dimensione delle bande
\end_layout

\begin_layout Standard
Esistono diversi modi per suddividere uno spettrogramma in range di frequenze
 significativi, ma quello che la libreria fin utilizza è la 
\emph on
scala Mel
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "pedersen1965mel"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
La scala Mel è stata sviluppata per emulare il modo in cui l'orecchio umano
 percepisce le frequenze dei suoni: è basata sulla scoperta sperimentale
 che più alta è la frequenza di due suoni più è difficile per l'orecchio
 umano discriminarli.
 Questa scala è, quindi, stata creata per mappare le frequenze del suono
 in modo che la loro rappresentazione sia più in linea con la percezione
 dell'orecchio umano.
\end_layout

\begin_layout Standard
È definita come segue:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
f(m):=700\left(10^{\frac{m}{2595}}-1\right)\label{eq:mel-def}
\end{equation}

\end_inset

dove:
\end_layout

\begin_layout Itemize
\begin_inset Formula $m$
\end_inset

 è la 
\emph on
frequenza Mel
\end_layout

\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

 è la frequenza in Hertz
\end_layout

\begin_layout Standard
Si può anche ricavare la duale:
\begin_inset Formula 
\begin{equation}
m(f)=2595\log_{10}\left(\frac{f}{700}+1\right)\label{eq:mel-inv}
\end{equation}

\end_inset

rappresentata in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Mapping-tra-Hertz"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		domain=0:8000,
\end_layout

\begin_layout Plain Layout

		samples=100,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 8000,
\end_layout

\begin_layout Plain Layout

		ymin =  0, ymax = 3000,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = Frequenza $(Hz)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Mel,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=red,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			2595*log10(x/700 +1)
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\lang italian

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Mapping-tra-Hertz"

\end_inset

Mapping tra Hertz e scala Mel
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset

La libreria fin crea le varie bande seguendo l'algoritmo descritto di seguito:
\end_layout

\begin_layout Enumerate
Parte dalla frequenza Mel 
\begin_inset Formula $\alpha_{M}=250$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Costante 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

MEL_START
\end_layout

\end_inset

 in 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

consts.h
\end_layout

\end_inset


\end_layout

\end_inset

 che se valutata nella 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:mel-def"
plural "false"
caps "false"
noprefix "false"

\end_inset

 corrisponde a 
\begin_inset Formula $f(\alpha_{M})=\alpha_{F}\cong174Hz$
\end_inset

: questo vuol dire che tutte le frequenze inferiori a 
\begin_inset Formula $\alpha_{F}$
\end_inset

 vengono scartate.
\end_layout

\begin_layout Enumerate
Si è definito un 
\begin_inset Formula $\delta_{M}=200$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Costante 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

MEL_STEP
\end_layout

\end_inset

 in 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

consts.h
\end_layout

\end_inset


\end_layout

\end_inset

, in modo tale che gli estremi delle bande sulla scala Mel saranno a:
\begin_inset Formula 
\[
\left\{ \alpha_{M},\alpha_{M}+\delta_{M},\alpha_{M}+2\delta_{M},...,\alpha_{M}+k\delta_{M}\right\} 
\]

\end_inset


\end_layout

\begin_layout Enumerate
Si convertono gli estremi in frequenze in Hertz usando la 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:mel-def"
plural "false"
caps "false"
noprefix "false"

\end_inset

, in modo tale che gli estremi delle bande siano a:
\begin_inset Formula 
\[
\left\{ f\left(\alpha_{M}\right),f\left(\alpha_{M}+\delta_{M}\right),f\left(\alpha_{M}+2\delta_{M}\right),...,f\left(\alpha_{M}+k\delta_{M}\right)\right\} 
\]

\end_inset


\end_layout

\begin_layout Standard
Si è scelto di scartare le frequenze inferiori a 
\begin_inset Formula $174Hz$
\end_inset

 poiché rappresentano frequenze troppo basse, spesso molto rumorose, che
 non fanno altro che sprecare complessità computazionale, dato che non contengon
o informazioni rilevanti.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scelta-di-c"

\end_inset

Scelta di 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $C$
\end_inset

 rappresenta il passo di suddivisione dello spettro nel tempo (vedi 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Spectrum-division"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Ogni 
\begin_inset Formula $C$
\end_inset

 finestre (e per ogni banda) vengono estratti i 3 picchi più significativi.
\end_layout

\begin_layout Standard
È necessario trovare il giusto compromesso tra 
\begin_inset Formula $C$
\end_inset

, il numero di picchi individuati e la robustezza dell'algoritmo:
\end_layout

\begin_layout Itemize
Avere un 
\begin_inset Formula $C$
\end_inset

 
\emph on
grande
\emph default
 vuol dire estrarre pochi picchi per ogni banda, il matching diventerà più
 difficoltoso, in quanto vengono estratte poche features dei segnali audio.
\end_layout

\begin_layout Itemize
Avere un 
\begin_inset Formula $C$
\end_inset

 
\emph on
piccolo
\emph default
, al contrario, significa estrarre più picchi, avere un matching più robusto
 (dato che vengono estratte più features), ma al contempo dover memorizzare
 più features nel database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={C},
\end_layout

\begin_layout Plain Layout

	ylabel={Recognition rate},
\end_layout

\begin_layout Plain Layout

	legend pos=south east,
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathparse{
\backslash
tick*100}
\backslash
pgfmathprintnumber{
\backslash
pgfmathresult}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
addplot table [x=C, y=rate, col sep=comma] {data/c.csv};
\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Recognition-rate-in-fx-C"

\end_inset

Recognition rate in funzione del parametro 
\begin_inset Formula $C$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Anche in questo caso risulta necessario valutare le performance del sistema
 in funzione di 
\begin_inset Formula $C$
\end_inset

.
 È stato predisposto un ambiente di test, simile a quello già presentato
 nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:La-finestratura"
plural "false"
caps "false"
noprefix "false"

\end_inset

, ottenendo il grafico in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Recognition-rate-in-fx-C"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
È possibile notare che per un 
\begin_inset Formula $C$
\end_inset

 superiore a 
\begin_inset Formula $40$
\end_inset

 il rate di riconoscimento diventa pressocchè nullo.
 Al contrario per un 
\begin_inset Formula $C$
\end_inset

 inferiore a circa 
\begin_inset Formula $30$
\end_inset

 si ottiene un buon recognition rate.
 Si è quindi scelto di utilizzare un 
\begin_inset Formula $C$
\end_inset

 pari a 
\begin_inset Formula $32$
\end_inset

, permettendo, in questo modo, di minimizzare il numero di features estratte.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:I-Links"

\end_inset

I Links
\end_layout

\begin_layout Standard
A questo punto si dispone di alcune features (i 
\emph on
picchi
\emph default
) che, in teoria, potrebbero essere utilizzate per identificare un brano.
 Ogni picco del segmento registrato dal client dovrebbe essere confrontato
 con i picchi del brano completo.
 Tuttavia questo approccio, anche se semplice e probabilmente funzionante,
 risulterebbe troppo lento.
 Infatti, in questo caso, la complessità sarebbe dell'ordine della lunghezza
 totale di tutti i brani presenti nel database: paradossalmente, più brani
 l'algoritmo riuscirebbe a individuare, più lento diventerebbe.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Per questo motivo, la libreria fin utilizza un altro algoritmo:
\end_layout

\begin_layout Enumerate
In primo luogo, viene individuato tra i picchi un 
\emph on
anchor point
\emph default
 o un 
\emph on
indirizzo
\emph default
.
\end_layout

\begin_layout Enumerate
Ogni anchor point definisce una 
\emph on
target zone
\emph default
, ovvero una porzione della costellazione dei picchi: sia 
\begin_inset Formula $\alpha$
\end_inset

 un anchor point, 
\begin_inset Formula $A_{\alpha}$
\end_inset

 l'insieme di picchi
\begin_inset Foot
status open

\begin_layout Plain Layout
Inizialmente vuoto
\end_layout

\end_inset

 associato ad 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

 un generico picco, allora:
\begin_inset Formula 
\[
\beta\in A_{\alpha}\iff\left(1\leq\beta.\mathrm{window}-\alpha.\mathrm{window}<3\right)\land\left(\beta.\mathrm{band}=\alpha.\mathrm{band}\right)
\]

\end_inset


\begin_inset Formula $A_{\alpha}$
\end_inset

 sarà quindi l'insieme dei punti che fanno parte della target zone.
\end_layout

\begin_layout Standard
La bande sono le stesse definite in base della scala Mel (vedi 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scelta-della-dimensione"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Si ottiene qualcosa di simile a quanto illustrato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Anchor-target"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Tempo $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequenza $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(1.2337624452119649,156)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(8.35010304565267,253)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(8.177029724681008,116)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(7.256587195538682,472)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(2.4197754035932766,253)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(3.706892420762254,294)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(9.859084153519337,252)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(8.53495230903478,49)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(11.49611021144223,322)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [blue,only marks,mark=star] coordinates {(9.464007176483538,561)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(3.6697999467081948,1769)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(4.026956852208946,1302)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(5.936343337187637,1144)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(3.6650481493475238,1174)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(6.461964839223465,1183)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(11.853904443933935,1143)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(5.739713325186329,1541)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(3.0155036031597597,1118)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(7.689312333706191,1665)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [green,only marks,mark=star] coordinates {(11.70364789096238,1616)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(3.523615767930713,2545)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(1.0848245428151932,2659)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(10.129650705452748,2383)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(3.970368763958769,2520)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(7.532556747022665,2595)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(3.553257221637658,2275)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(1.164954468021365,2180)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(5.860749713924608,2487)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(3.8631716522570008,2458)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [red,only marks,mark=star] coordinates {(6.739810860494329,2305)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(7.560235078417245,3829)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(7.697392888392581,3145)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(6.66181336299463,3323)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(11.308449523876288,3184)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(3.209950802394781,3259)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(2.935104227985603,3601)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(11.688375153800843,3878)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(8.107012587028235,3143)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(8.518029171169964,3777)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [orange,only marks,mark=star] coordinates {(0.2129169186634634,3812)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, red},text mark as
 node=true] coordinates {(3.523615767930713,2545)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [mark=none] coordinates {(3.523615767930713,2545) (7.532556747022665,2595)
};
\end_layout

\begin_layout Plain Layout


\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {(7.532556747022665,2595)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [mark=none] coordinates {(3.523615767930713,2545) (5.860749713924608,2487)
};
\end_layout

\begin_layout Plain Layout


\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {(5.860749713924608,2487)};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [mark=none] coordinates {(3.523615767930713,2545) (6.739810860494329,2305)
};
\end_layout

\begin_layout Plain Layout


\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {(6.739810860494329,2305)};
\end_layout

\begin_layout Plain Layout


\backslash
draw[fill=yellow, fill opacity=0.2] (50,200) rectangle (80,300);
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
\begin_inset CommandInset label
LatexCommand label
name "fig:Anchor-target"

\end_inset


\lang italian
Selezione
\lang english
 
\lang italian
dell'anchor
\lang english
 point e 
\lang italian
della
\lang english
 target zone
\end_layout

\end_inset


\end_layout

\end_inset


\lang italian
La coppia 
\emph on
anchor point
\emph default
 e 
\emph on
picco
\emph default
 prende il nome di 
\emph on
Link
\emph default
.
 Il Link, quindi, viene costruito a partire dalla coppia 
\begin_inset Formula $(\alpha,\beta)$
\end_inset

 in questo modo:
\lang english

\begin_inset Formula 
\[
Link\left\{ \begin{aligned}hash= & h(\delta_{w},\delta_{f},\alpha.frequency)\\
window= & \alpha.window
\end{aligned}
\right.
\]

\end_inset

Dove:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta_{w}=\beta.window-\alpha.window$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta_{f}=\beta.frequency-\alpha.frequency$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $h(\astrosun)$
\end_inset

 è una funzione di hash
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Tempo $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequenza $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout


\backslash
addplot [ only marks,mark=star,nodes near coords={($w_
\backslash
alpha$,$f_
\backslash
alpha$)}] coordinates { ( 4 , 2100 ) };
\end_layout

\begin_layout Plain Layout


\backslash
addplot [ only marks,mark=star,nodes near coords={($w_
\backslash
beta$,$f_
\backslash
beta$)}] coordinates { ( 7 , 2700 ) };
\end_layout

\begin_layout Plain Layout


\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, red},text mark as
 node=true] coordinates {( 4, 2100 )};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [no marks] coordinates { (4,2100) (7,2700) };
\end_layout

\begin_layout Plain Layout


\backslash
node[above,align=left] at (axis cs:8,1600) {hash$=
\backslash
delta_w:
\backslash
delta_f:f_
\backslash
alpha$
\backslash

\backslash
window=$w_
\backslash
alpha$};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
\begin_inset CommandInset label
LatexCommand label
name "fig:Link-structure"

\end_inset

Struttura dei link
\end_layout

\end_inset


\end_layout

\end_inset


\lang italian
Nella 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Link-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è mostrato un esempio di Link.
 Notare che viene memorizzata anche la finestra dell'anchor point: questo
 dettaglio ritornerà utile in seguito
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Il-metodo-db.searchIdGivenLinks"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
I Link generati in questo modo sono molto riproducibili, soprattutto in
 presenza di rumore o artefatti di codifica dell'audio.
\end_layout

\begin_layout Standard
Un altro grande vantaggio di questa rappresentazione risiede nel fatto che
 tutti i tempi
\begin_inset Foot
status open

\begin_layout Plain Layout
Gli indici delle finestre ad essere precisi
\end_layout

\end_inset

 sono relativi, in quanto espressi rispetto all'anchor point: in altre parole,
 non importa quando l'utente inizia a registrare il segmento audio, l'algoritmo
 riuscirà comunque ad individuare il match.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:La-libreria-fin_db"

\end_inset

La libreria fin_db
\end_layout

\begin_layout Standard
La libreria 
\emph on
fin_db
\emph default
 è il secondo dei componenti più importanti del sistema.
 Il suo compito principale è quello di interfacciarsi con il database per
 effettuare le seguenti operazioni:
\end_layout

\begin_layout Itemize

\emph on
Inserimento
\emph default
: inserire i Links di un nuovo brano nel database insieme al suo nome
\end_layout

\begin_layout Itemize

\emph on
Ricerca
\emph default
:
\emph on
 
\emph default
gestire il processo di individuazione del brano a partire dal Links che
 lo caratterizzano
\end_layout

\begin_layout Standard
In secondo luogo, fin_db può essere vista come una sorta di livello di astrazion
e del database: la libreria è basata sul connector 
\emph on
mariadb++
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/viaduck/mariadbpp
\end_layout

\end_inset


\end_layout

\end_inset


\emph default
 e il database utilizzato è 
\emph on
MariaDB
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://mariadb.org/
\end_layout

\end_inset


\end_layout

\end_inset

, ma può essere facilmente riconfigurata per utilizzare altri database e
 altri connector.
 In particolare, 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

DB
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Vedere il file 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

db.cpp
\end_layout

\end_inset


\end_layout

\end_inset

 è la classe che si occupa di dialogare con l'istanza del database.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Inserimento-brano"

\end_inset

L'inserimento di un brano
\end_layout

\begin_layout Standard
Il primo passo per rendere un brano individuabile è quello di memorizzare
 i Links che lo caratterizzano e il suo nome all'interno database.
 A questo scopo sono state predisposte due entità rappresentate in figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modello-ER-database-ricerca"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[auto,node distance=1.5cm]
\end_layout

\begin_layout Plain Layout

	
\backslash
node[entity] (node1) {
\backslash
textbf{musicinfo}}
\end_layout

\begin_layout Plain Layout

		[grow=up,sibling distance=2cm]
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {name}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{id}}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[relationship] (rel1) [right = of node1] {
\backslash
textit{referito a}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[entity] (node2) [right = of rel1] {
\backslash
textbf{recordings}}
\end_layout

\begin_layout Plain Layout

		[grow=down,sibling distance=2cm]
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{hash}}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{time}}};
\end_layout

\begin_layout Plain Layout

	
\backslash
path (rel1) edge node {1,
\backslash
(n
\backslash
)} (node1)
\end_layout

\begin_layout Plain Layout

	edge node {1,1} (node2);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modello-ER-database-ricerca"

\end_inset

Modello ER database, inserimento
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
musicinfo
\emph default
 contiene le informazioni del brano, nello specifico il suo nome e un id
 che lo identifica univocamente.
\end_layout

\begin_layout Itemize

\emph on
recordings
\emph default
 contiene i Links.
 Utilizzando il modello relazionale, oltre ai Links, verrà memorizzata anche
 la foreign key 
\emph on
songId
\emph default
 che punta ad un record di musicinfo.
 La tupla
\begin_inset Formula 
\[
\{\underbrace{hash,time}_{Link},songId\}
\]

\end_inset

fungerà da chiave primaria.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

L'inserimento di un nuovo brano nel database avviene richiamando la funzione
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines=false,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

void insertSong(
\end_layout

\begin_layout Plain Layout

    const std::string &filename,
\end_layout

\begin_layout Plain Layout

    DB &db
\end_layout

\begin_layout Plain Layout

)
\end_layout

\end_inset

definita nel file 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fin_db.h
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
La funzione prende in input il nome del file audio da leggere e un oggetto
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

DB
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Già istanziato dal caller
\end_layout

\end_inset

 e:
\end_layout

\begin_layout Enumerate
Crea un oggetto 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

WavReader
\end_layout

\end_inset

 per leggere il file passatogli come parametro.
\end_layout

\begin_layout Enumerate
Estrae i Links utilizzando la funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

computeLinks
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Richiama il metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.insertSong
\end_layout

\end_inset

 passando come parametri il nome del brano e i Links del brano stesso.
\end_layout

\begin_layout Standard
A sua volta il metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.insertSong
\end_layout

\end_inset

 inserisce nella tabella 
\series bold
musicinfo
\series default
 il nome del brano e nella tabella 
\series bold
recordings
\series default
 i Links che lo caratterizzano (vedi figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modello-ER-database-ricerca"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Uno stralcio delle due tabelle è visibile nelle tabelle a margine 
\begin_inset CommandInset ref
LatexCommand ref
reference "mar:Stralcio-musicinfo"
plural "false"
caps "false"
noprefix "false"

\end_inset

 e 
\begin_inset CommandInset ref
LatexCommand ref
reference "mar:Stralcio-recordings"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float margintable
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arabella
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fell In Love With A Girl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Jeweller's Hand
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fight Fire with Fire
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ride the Lightning
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "mar:Stralcio-musicinfo"

\end_inset

Stralcio 
\series bold
musicinfo
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float margintable
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
hash
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
songId
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
93141319434145
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
625
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
154709161072387
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3180
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
411179850164819
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7399
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
454176498247512
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9637
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
770548217553156
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8544
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "mar:Stralcio-recordings"

\end_inset

Stralcio 
\series bold
recordings
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:L'identificazione-di-un"

\end_inset

L'identificazione di un brano
\end_layout

\begin_layout Standard
Si assuma ora che:
\end_layout

\begin_layout Itemize
i Links e i nomi dei brani completi siano già nel database.
\end_layout

\begin_layout Itemize
i Links siano già stati estratti dal segmento da identificare.
\end_layout

\begin_layout Standard
Allo scopo di facilitare il processo di identificazione, viene introdotta
 una nuova tabella, rappresentata in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modello-ER-database-inserimento"
plural "false"
caps "false"
noprefix "false"

\end_inset

, per contenere i Links del segmento registrato.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[auto,node distance=1.5cm]
\end_layout

\begin_layout Plain Layout

	
\backslash
node[entity] (node1) {
\backslash
textbf{
\backslash
_recording}}
\end_layout

\begin_layout Plain Layout

		[grow=down,sibling distance=2cm]
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{hash}}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{start}}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modello-ER-database-inserimento"

\end_inset

Modello ER database, ricerca
\end_layout

\end_inset


\end_layout

\end_inset

Si noti come questa tabella sia molto simile alla tabella 
\series bold
recordings
\series default
, ma con alcune differenze:
\end_layout

\begin_layout Itemize
Non esiste alcuna relazione con la tabella 
\series bold
musicinfo
\series default
, in quanto 
\series bold
_recording
\series default
 conterrà i Links di un solo segnale audio.
\end_layout

\begin_layout Itemize
Il campo 
\bar under
time
\bar default
 è stato rinominato in 
\bar under
start
\bar default
, questo è dovuto al fatto che nel caso dei brani completi 
\bar under
time
\bar default
 rappresenta un valore assoluto
\begin_inset Foot
status open

\begin_layout Plain Layout
L'inizio del brano
\end_layout

\end_inset

, mentre 
\bar under
start
\bar default
 è un riferimento relativo
\begin_inset Foot
status open

\begin_layout Plain Layout
Rispetto all'inizio del segmento registrato
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In più, la tabella 
\series bold
_recording
\series default
 viene creata con alcune particolari accortezze
\begin_inset CommandInset citation
LatexCommand cite
key "pan2012study"
literal "true"

\end_inset

:
\end_layout

\begin_layout Enumerate
È una 
\emph on
temporary table
\emph default
, ovvero una tabella che esiste solo per la durata della connessione al
 database.
\end_layout

\begin_layout Enumerate
Viene specificato 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ENGINE=MEMORY
\end_layout

\end_inset

, ovvero la tabella viene mantenuta interamente in RAM, non venendo, quindi,
 scritta su disco.
\end_layout

\begin_layout Standard
In generale, l'utilizzo di una temporary table con 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ENGINE=MEMORY
\end_layout

\end_inset

 è quindi molto utile in situazioni in cui è necessario mantenere temporaneament
e i dati in memoria per migliorare le prestazioni, ma non è necessario preservar
li per un lungo periodo di tempo, come nel caso in analisi.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La funzione che si occupa di identificare un segmento registrato dati i
 suoi Links è:
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines=false,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

fin::DB::SearchResult searchFromLinks(
\end_layout

\begin_layout Plain Layout

    const fin::core::Links &links,
\end_layout

\begin_layout Plain Layout

    DB &db,
\end_layout

\begin_layout Plain Layout

    bool noMinHint
\end_layout

\begin_layout Plain Layout

)
\end_layout

\end_inset

ed è definita in 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fin_db.h
\end_layout

\end_inset

.
 Prende in input:
\end_layout

\begin_layout Enumerate
i Links della registrazione.
\end_layout

\begin_layout Enumerate
un oggetto 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

DB
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
un parametro che indica se ritornare un match a prescindere dal numero di
 Links in comune
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:link-comuni"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Richiama il metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.searchSongGivenLinks
\end_layout

\end_inset

 che ritorna una struct 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

SearchResult
\end_layout

\end_inset

, composta come segue:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

struct SearchResult {
\end_layout

\begin_layout Plain Layout

	bool found;
\end_layout

\begin_layout Plain Layout

	std::uint32_t id;
\end_layout

\begin_layout Plain Layout

	float timeDelta;
\end_layout

\begin_layout Plain Layout

	std::uint64_t commonLinks;
\end_layout

\begin_layout Plain Layout

	std::string name;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset

Dove:
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

found
\end_layout

\end_inset

 indica se il segmento è stato identificato correttamente, ovvero se è stato
 trovato un match nel database.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

id
\end_layout

\end_inset

 è l'identificativo del brano originale identificato.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

timeDelta
\end_layout

\end_inset

 è la differenza temporale in secondi tra il segmento registrato e la sua
 posizione nel brano originale.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

commonLinks
\end_layout

\end_inset

 è il numero di Link
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:I-Links"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

 in comune tra il segmento e il brano originale.
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

name
\end_layout

\end_inset

 è il nome del brano originale.
\end_layout

\begin_layout Standard
Quindi, se il brano viene identificato, vengono popolati di conseguenza
 i primi 4 campi della struct.
 Per reperire il nome del brano viene richiamato un ulteriore metodo: 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.getSongNameById
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Nello specifico, 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.getSongNameById
\end_layout

\end_inset

 consiste in una query su 
\series bold
musicinfo
\series default
 per ottenere il nome associato ad un determinato id.
\end_layout

\begin_layout Standard
Il metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.searchSongGivenLinks
\end_layout

\end_inset

 richiede una trattazione specifica nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Il-metodo-db.searchIdGivenLinks"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Il-metodo-db.searchIdGivenLinks"

\end_inset

Il metodo db.searchSongGivenLinks
\end_layout

\begin_layout Standard
Il metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

db.searchSongGivenLinks
\end_layout

\end_inset

 è il cuore della parte di identificazione di un brano.
 Si basa su tre concetti fondamentali:
\end_layout

\begin_layout Enumerate
Tra i Links del brano originale 
\begin_inset Formula $Links_{O}$
\end_inset

 e quelli del segmento registrato 
\begin_inset Formula $Links_{R}$
\end_inset

 dev'esserci una differenza temporale 
\begin_inset Formula $\Delta T$
\end_inset

 costante se si riferiscono allo stesso brano.
\begin_inset Foot
status open

\begin_layout Plain Layout
Se l'utente ha iniziato a registrare il brano dopo 
\begin_inset Formula $15s$
\end_inset

 è ragionevole pensare che la differenza temporale tra 
\series bold
recordings
\series default
.
\bar under
time
\bar default
 e 
\series bold
_recording
\series default
.
\bar under
start
\bar default
 sia costante e pari a 
\begin_inset Formula $15s$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
La stessa differenza 
\begin_inset Formula $\Delta T$
\end_inset

 dev'essere non negativa
\begin_inset Foot
status open

\begin_layout Plain Layout

\series bold
recordings
\series default
.
\bar under
time
\bar default
 
\begin_inset Formula $-$
\end_inset

 
\series bold
_recording
\series default
.
\bar under
start
\bar default
 
\begin_inset Formula $\geq0$
\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Gli hash di 
\begin_inset Formula $Links_{O}$
\end_inset

 e di 
\begin_inset Formula $Links_{R}$
\end_inset

 devono corrispondere.
\end_layout

\begin_layout Standard
A questo punto basterebbe quindi:
\end_layout

\begin_layout Enumerate
Raggruppare per 
\begin_inset Formula $\Delta T$
\end_inset

 e per id del brano originale, definendo con 
\begin_inset Formula $n$
\end_inset

 il numero di elementi che ricadono nello stesso gruppo.
\end_layout

\begin_layout Enumerate
Ordinare per 
\begin_inset Formula $n$
\end_inset

 decrescente.
\end_layout

\begin_layout Enumerate
Estrarre il primo gruppo che rappresenta il match migliore.
\end_layout

\begin_layout Standard
Queste operazioni sono state realizzate in SQL con la query riportata di
 seguito:
\begin_inset listings
lstparams "language=SQL,basicstyle={\ttfamily},tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

SELECT
\end_layout

\begin_layout Plain Layout

	recordings.songId,
\end_layout

\begin_layout Plain Layout

	COUNT(*) AS n,
\end_layout

\begin_layout Plain Layout

	recordings.time-_recording.start AS delta
\end_layout

\begin_layout Plain Layout

FROM
\end_layout

\begin_layout Plain Layout

	recordings INNER JOIN _recording
\end_layout

\begin_layout Plain Layout

ON
\end_layout

\begin_layout Plain Layout

	recordings.hash=_recording.hash
\end_layout

\begin_layout Plain Layout

WHERE
\end_layout

\begin_layout Plain Layout

	recordings.time>=_recording.start
\end_layout

\begin_layout Plain Layout

GROUP BY
\end_layout

\begin_layout Plain Layout

	delta,
\end_layout

\begin_layout Plain Layout

	recordings.songId
\end_layout

\begin_layout Plain Layout

ORDER BY n DESC
\end_layout

\end_inset

Una volta eseguita la query, il metodo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

db.searchSongGivenLinks
\end_layout

\end_inset

 estrae la prima prima riga del recordset e se il numero di Link in comune
 
\begin_inset Formula $n$
\end_inset

 supera una determinata soglia
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:link-comuni"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

 popola la struct 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

SearchResult
\end_layout

\end_inset

, come riportato nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:L'identificazione-di-un"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
In figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Scatter-match"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è stato riportato un grafico in cui sull'asse delle ascisse è presente
 il numero di finestra nella quale è contenuto un Link della registrazione
 originale, analogamente accade per l'asse delle ordinate ma per il segmento
 registrato.
 Si nota facilmente la diagonale a densità maggiore intorno al valore 
\begin_inset Formula $2000$
\end_inset

 sulle 
\begin_inset Formula $x$
\end_inset

, questo vuol dire che:
\end_layout

\begin_layout Itemize
Un match è stato trovato.
\end_layout

\begin_layout Itemize
La registrazione è iniziata circa 
\begin_inset Formula $2000$
\end_inset

 finestre dopo l'inizio del brano originale.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={
\backslash
# finestra brano originale},
\end_layout

\begin_layout Plain Layout

	ylabel={
\backslash
# finestra registrazione},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
addplot[
\end_layout

\begin_layout Plain Layout

	scatter,
\end_layout

\begin_layout Plain Layout

	only marks,
\end_layout

\begin_layout Plain Layout

	scatter/use mapped color={red},
\end_layout

\begin_layout Plain Layout

	mark options={scale=1.5, opacity=0.2}
\end_layout

\begin_layout Plain Layout

] table [x=original, y=recording, col sep=comma] {data/matching_time_difference.c
sv};
\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Scatter-match"

\end_inset

Scatterplot di un match
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:link-comuni"

\end_inset

Il numero di Link comuni
\end_layout

\begin_layout Standard
Qual è la soglia oltre la quale si può dire con 
\emph on
abbastanza sicurezza
\emph default
 che un segmento registrato fa parte di un determinato brano? La cosa più
 ragionevole da fare è definire sperimentalmente una soglia di Links in
 comune tra segmento registrato e brano originale, oltre la quale si ottiene
 un rate di falsi positivi basso.
\end_layout

\begin_layout Standard
Intuitivamente quanto più il numero di Links in comune è basso tanto più
 è probabile che venga identificato un brano errato, d'altro canto, un numero
 di Links in comune sufficientemente alto porta ad una 
\emph on
confidence
\emph default
 alta sull'identificazione.
\end_layout

\begin_layout Standard
A questo scopo è stato predisposto un ambiente di test:
\end_layout

\begin_layout Enumerate
Viene estratto un segmento di durata compresa tra 
\begin_inset Formula $0.5$
\end_inset

 e 
\begin_inset Formula $6$
\end_inset

 secondi dai brani originali.
\end_layout

\begin_layout Enumerate
Per ogni segmento estratto viene eseguito il processo di identificazione.
\end_layout

\begin_layout Enumerate
Per ogni segmento vengono memorizzati in una mappa il numero di Links in
 comune come chiave e i false positive e i true positive come valore.
\end_layout

\begin_layout Standard
Ottenute queste informazioni il numero di falsi positivi viene riscalato
 sul totale di identificazioni.
 Si può quindi realizzare il grafico in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:False-positive-rate-in-fz-link-comuni"
plural "false"
caps "false"
noprefix "false"

\end_inset

, che visualizza il rate di falsi positivi al variare del numero di Links
 in comune.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Numero Link in comune},
\end_layout

\begin_layout Plain Layout

	ylabel={False positive rate},
\end_layout

\begin_layout Plain Layout

	legend pos=north east,
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
addplot table [x=common_links, y=false_positive, col sep=comma] {data/min_hint.cs
v};
\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:False-positive-rate-in-fz-link-comuni"

\end_inset

False positive rate in funzione del numero di Link in comune
\end_layout

\end_inset


\end_layout

\end_inset

Si può, quindi, facilmente notare, interpretando il grafico, che la soglia
 oltre la quale il rate di falsi positivi viene minimizzato è compresa tra
 
\begin_inset Formula $10$
\end_inset

 e 
\begin_inset Formula $15$
\end_inset

.
 In altre parole: se il segmento registrato ed un determinato brano hanno
 in comune un numero di Links pari almeno a circa 
\begin_inset Formula $15$
\end_inset

, allora si può dire con ragionevole sicurezza che è stato probabilmente
 individuato il brano corretto.
\end_layout

\begin_layout Standard
La soglia di Link in comune è stata, dunque, impostata a 
\begin_inset Formula $15$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Costante 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

MIN_HINT
\end_layout

\end_inset

 in 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

consts.h
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:L'eseguibile-server_entry"

\end_inset

L'eseguibile server_entry
\end_layout

\begin_layout Standard
Riprendendo lo schema già presentato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ed evidenziando lo scope di 
\emph on
server_entry
\emph default
, si ottiene quanto riportato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale-server_entry"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/architettura_generale_server_entry.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-architettura-generale-server_entry"

\end_inset

Schema architettura generale, dettaglio 
\emph on
server_entry
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Più nello specifico, l'eseguibile 
\emph on
server_entry
\emph default
 è la parte del sistema che si occupa di:
\end_layout

\begin_layout Enumerate
Leggere i file Wave dei brani originali da dalla memoria di massa.
\end_layout

\begin_layout Enumerate
Estrarne i Links.
\end_layout

\begin_layout Enumerate
Memorizzare i Links e nomi dei brani all'interno del database.
\end_layout

\begin_layout Standard
Server_entry non è altro che un wrapper costruito attorno alle funzionalità
 offerte dalla libreria fin_db (vedere figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Organizzazione-codice"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Più tecnicamente, server_entry riceve attraverso la riga di comando un path
 che punta ad una cartella contenente dei file Wave e per ogni Wave nella
 cartella richiama una singola funzione di fin_db: 
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines=false,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

void fin::insertSong(
\end_layout

\begin_layout Plain Layout

    const std::string &filename,
\end_layout

\begin_layout Plain Layout

    DB &db
\end_layout

\begin_layout Plain Layout

)
\end_layout

\end_inset

Passando il nome del brano da processare e l'oggetto 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

DB
\end_layout

\end_inset

 per accedere al database
\begin_inset Foot
status open

\begin_layout Plain Layout
Per maggiori dettagli vedere 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Inserimento-brano"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:L'eseguibile-server_rest"

\end_inset

L'eseguibile server_rest
\end_layout

\begin_layout Standard
Riprendendo lo schema già presentato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ed evidenziando lo scope di 
\emph on
server_rest
\emph default
, si ottiene quanto riportato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale-server_rest"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/architettura_generale_server_rest.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-architettura-generale-server_rest"

\end_inset

Schema architettura generale, dettaglio 
\emph on
server_rest
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il compito dell'eseguibile server_rest è, quindi, quello di mettere a disposizio
ne un endpoint REST per l'identificazione delle registrazioni audio.
\end_layout

\begin_layout Standard
Questo componente è basato sulla libreria open-source 
\emph on
cpp-httplib
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/yhirose/cpp-httplib
\end_layout

\end_inset


\end_layout

\end_inset

 che implementa un semplice server HTTP bloccante.
 Server_rest sfrutta funzionalità sia della libreria fin, sia della libreria
 fin_db.
\end_layout

\begin_layout Section
Il problema del CORS
\end_layout

\begin_layout Standard
Il protocollo 
\emph on
CORS
\emph default
, ovvero Cross-Origin Resource Sharing
\begin_inset CommandInset citation
LatexCommand cite
key "chen2018we"
literal "true"

\end_inset

, è stato introdotto per prevenire che un sito web malintenzionato possa
 accedere ai dati degli utenti di un altro sito web legittimo.
 In altre parole si vuole evitare, o quantomeno regolare, il resource sharing
 tra entità differenti per questioni di sicurezza.
\end_layout

\begin_layout Standard
I browser moderni che supportano CORS, prima di inviare la vera e propria
 richiesta HTTP
\begin_inset Foot
status open

\begin_layout Plain Layout
Una classica GET, POST, PUT o DELETE
\end_layout

\end_inset

 verso un'origin esterna, inviano una 
\emph on
preflight
\emph default
 
\emph on
request
\emph default
.
 La preflight request è una richiesta OPTIONS inviata dal browser al server
 esterno per verificare se le richieste cross-domain sono ammissibili e
 entro che limiti lo sono.
 Se il server risponde positivamente alla richiesta OPTIONS, il browser
 effettuerà la richiesta effettiva.
\end_layout

\begin_layout Standard
In questo modo, il protocollo CORS garantisce che solo le richieste provenienti
 da origine sicure e autorizzate possano accedere alle risorse del server
 esterno, garantendo la sicurezza nello scambio di informazioni tra origin
 diverse.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
È stato necessario tener conto delle policy di sicurezza imposte dal protocollo
 CORS nella comunicazione tra il client wasm e il server_rest (figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CORS"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template Inkscape
	filename img/cors.svg
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CORS"

\end_inset

Schema richieste cross-origin
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Anticipando quanto verrà trattato nel capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-wasm"
plural "false"
caps "false"
noprefix "false"

\end_inset

, nello scenario presentato, il client Wasm invia al server REST i Links
 che ha estratto dalla registrazione.
 Si noti, però, che la RIA Wasm viene servita da un server HTTP eseguito
 localmente al client.
 Di fatto, quindi, il server HTTP sul client (
\emph on
origin 1
\emph default
) vuole dialogare con il server HTTP REST (
\emph on
origin 2
\emph default
): si ha una richiesta cross-origin.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
A questo punto, nel server_rest, si è reso necessario introdurre un 
\emph on
pre routing handler
\emph default
 che gestisca le richieste preflight OPTIONS, insieme ad un 
\emph on
post routing handler
\emph default
 che aggiunga alcuni header alla risposta del server, previsti dalle specifiche
 del protocollo CORS.
\end_layout

\begin_layout Standard
Tra gli header aggiunti, vale la pena citare 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

Access-Control-Allow-Origin
\end_layout

\end_inset

, che indica da quali domini un server può ricevere richieste cross-origin.
 Mentre in passato era possibile specificare un asterisco (*) come valore
 di questo header per consentire l'accesso a tutte le origin, oggi questa
 pratica è stata limitata per ragioni di sicurezza.
 Infatti, l'uso dell'asterisco potrebbe aprire la porta a attacchi di tipo
 
\emph on
cross-site request forgery
\emph default
 (CSRF) e a violazioni delle politiche di sicurezza del browser.
\end_layout

\begin_layout Standard
Invece di utilizzare l'asterisco, è necessario specificare l'origin corretta,
 ovvero l'indirizzo dell'entità
\begin_inset Foot
status open

\begin_layout Plain Layout
In questo caso del server HTTP sul client
\end_layout

\end_inset

 che sta facendo la richiesta.
 Per questo motivo, non conoscendo a priori l'origin di una richiesta, il
 server estrae l'origin dalla richiesta ricevuta, per poi impostare l'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

Access-Control-Allow-Origin
\end_layout

\end_inset

 di conseguenza.
\end_layout

\begin_layout Section
La serializzazione dei Links
\end_layout

\begin_layout Standard
Giunti a questo punto nasce un altro problema: il client invia i Links calcolati
 al server, ma in che formato? I Links dovranno essere serializzati e deserializ
zati durante il transito tra client e server, così come indicato in figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:serializzazione"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template Inkscape
	filename img/serializzazione.svg
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:serializzazione"

\end_inset

Schema serializzazione e deserializzazione Links
\end_layout

\end_inset


\end_layout

\end_inset

Si è deciso di evitare l'utilizzo di JSON, poiché il suo vantaggio dell'essere
 human-readable non compensa la sua scarsa efficienza nel trasportare dati
\begin_inset CommandInset citation
LatexCommand cite
key "tauro2012object"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Basti pensare che, mediamente, i Links estratti da una registrazione di
 
\begin_inset Formula $6$
\end_inset

/
\begin_inset Formula $7$
\end_inset

 secondi sono circa 
\begin_inset Formula $900$
\end_inset

.
 Ogni Link contiene due interi a 
\begin_inset Formula $64$
\end_inset

 bit, ovvero 
\begin_inset Formula $20$
\end_inset

 cifre decimali, che rappresentano rispettivamente l'hash e il numero della
 finestra di appartenenza.
 Se si rappresenta un Link in JSON come segue
\begin_inset Foot
status open

\begin_layout Plain Layout
Ovvero come un array di due elementi
\end_layout

\end_inset

:
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

	745129879060042, //hash
\end_layout

\begin_layout Plain Layout

	307862961066999  //window
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset

allora lo spazio richiesto ammonta a:
\begin_inset Formula 
\[
len("[")+len(hash)+len(",")+len(window)+len("]")=43B
\]

\end_inset

Quindi 900 Links contenuti in un array JSON occuperanno:
\begin_inset Formula 
\[
len("[")+(len(Link)+len(","))\cdot900+len("]")=39602B\cong39KB
\]

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

    [%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end_layout

\begin_layout Plain Layout

        box/.style={rectangle,draw=black, minimum size=1cm},
\end_layout

\begin_layout Plain Layout

    ]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end_layout

\begin_layout Plain Layout


\backslash
foreach 
\backslash
x/
\backslash
y in {0/9, 1/5,2/13,3/19,4/
\backslash
dots,5/
\backslash
dots,6/
\backslash
dots,7/
\backslash
dots,8/21,9/2}
\end_layout

\begin_layout Plain Layout

        
\backslash
node[box] at (
\backslash
x,0){
\backslash
y};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[decorate,decoration={brace,mirror},thick] (-.5,-.7) -- node[below,yshift=-2mm
]{Link 
\backslash
#1} (1.5,-.7); 
\backslash
draw[decorate,decoration={brace,mirror},thick] (1.5,-.7) -- node[below,yshift=-2mm
]{Link 
\backslash
#2} (3.5,-.7);
\end_layout

\begin_layout Plain Layout


\backslash
draw[decorate,decoration={brace,mirror},thick] (7.5,-.7) -- node[below,yshift=-2mm
]{Link 
\backslash
#n} (9.5,-.7);
\end_layout

\begin_layout Plain Layout


\backslash
draw[->,thick] (1,1.2) --  node[above,yshift=2mm,anchor=south west]{hash}
 (0,.7);
\end_layout

\begin_layout Plain Layout


\backslash
draw[->,thick] (2,1.2) --  node[above,yshift=2mm,anchor=south west]{window}
 (1,.7);
\end_layout

\begin_layout Plain Layout


\backslash
draw[->,thick] (1,1.2) --  node[above,yshift=2mm,anchor=south west]{} (2,.7);
\end_layout

\begin_layout Plain Layout


\backslash
draw[->,thick] (2,1.2) --  node[above,yshift=2mm,anchor=south west]{} (3,.7);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rappresentazione-serializzazione"

\end_inset

Rappresentazione serializzazione binaria Links
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Al contrario, se si utilizza una serializzazione binaria, in cui si giustappongo
no i due interi che compongono il Link in uno stream di byte (vedi figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rappresentazione-serializzazione"
plural "false"
caps "false"
noprefix "false"

\end_inset

), si occuperanno:
\begin_inset Formula 
\[
\mathtt{sizeof}(\mathtt{uint64\_t})\cdot2\cdot900=8B\cdot1800=14400B\cong14KB
\]

\end_inset

Si ottiene quindi un risparmio pari al:
\begin_inset Formula 
\[
\left(1-\frac{14400B}{39602B}\right)\cdot100\cong64\%
\]

\end_inset

Esistono diverse librerie che gestiscono questo tipo di serializzazione
\begin_inset Foot
status open

\begin_layout Plain Layout
Ad esempio: ProtoBuf di Google o Apache Thrift
\end_layout

\end_inset

, tuttavia si è scelto di scrivere un'implementazione custom.
 Questa scelta è stata dettata dal fatto di non voler aggiungere ulteriori
 dipendenze nel progetto, ma soprattutto dal fatto che la serializzazione/deseri
alizzazione viene utilizzata una sola volta nell'intero sistema, ossia solo
 per inviare e riceve i Links.
\end_layout

\begin_layout Standard
A questo scopo è stata definita la classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

 nel namespace 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fin::utils
\end_layout

\end_inset

 della libreria fin.
 La classe rappresenta un contenitore di bytes
\begin_inset Foot
status open

\begin_layout Plain Layout
Nello specifico 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::uint8_t
\end_layout

\end_inset


\end_layout

\end_inset

 che permette di:
\end_layout

\begin_layout Itemize
Aggiungere un dato arbitrario nel buffer stesso, attraverso il metodo:
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines=false,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

template<typename T>
\end_layout

\begin_layout Plain Layout

void add(const T &data)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Rimuovere un dato dal buffer, con:
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines=false,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

template<typename T>
\end_layout

\begin_layout Plain Layout

void remove(T &data)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

 viene utilizzata all'interno della classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

Links
\end_layout

\end_inset

 nei metodi 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

toByteBuffer()
\end_layout

\end_inset

 e 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fromByteBuffer(ByteBuffer &byteBuffer)
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
Il primo si occupa di serializzare i Links in un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Il secondo, una factory, deserializza i Links presenti nel 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Ne segue che il dialogo tra client Wasm e rest_server avverrà come di seguito
 descritto:
\end_layout

\begin_layout Enumerate
Il client Wasm calcola i Links
\end_layout

\begin_layout Enumerate
Il client Wasm serializza i Links in un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

 richiamando 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

toByteBuffer()
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Il client Wasm estrae lo stream di byte dal 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Il client Wasm invia lo stream di byte al rest_server
\end_layout

\begin_layout Enumerate
Il rest_server riceve lo stream di byte
\end_layout

\begin_layout Enumerate
Il rest_server converte lo stream di byte in un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Il rest_server deserializza i Links nel 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

 Links richiamando 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fromByteBuffer(ByteBuffer &byteBuffer)
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:L'eseguibile-mock_client"

\end_inset

L'eseguibile mock_client
\end_layout

\begin_layout Standard
L'eseguibile 
\emph on
mock_client
\emph default
 (figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:architettura-mock-client"
plural "false"
caps "false"
noprefix "false"

\end_inset

) viene utilizzato esclusivamente nelle attività di test, il suo scopo è
 verificare il corretto funzionamento del sistema.
 È l'equivalente del Wasm client, ma:
\end_layout

\begin_layout Itemize
Dialoga direttamente col database senza passare per il rest_server.
\end_layout

\begin_layout Itemize
Non utilizza il microfono per registrare un segmento audio da identificare,
 bensì legge un file Wave.
\end_layout

\begin_layout Itemize
È un eseguibile 
\emph on
tradizionale
\emph default
 e non una RIA.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template Inkscape
	filename img/architettura_generale_mock_client.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:architettura-mock-client"

\end_inset

Schema architettura 
\emph on
mock_client
\end_layout

\end_inset


\end_layout

\end_inset

Mock_client dipende da entrambe le librerie fin e fin_db.
 Prende in input il percorso di un file Wav da identificare e:
\end_layout

\begin_layout Enumerate
Carica i sample del file Wav utilizzando la classe 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

WavReader
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Calcola i Links a partire dai sample utilizzando la funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fin::computeLinks
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Serializza i Links in un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
L'unico scopo di questo passaggio è verificare il corretto funzionamento
 della serializzazione/deserializzazione
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Deserializza i Links dal 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ByteBuffer
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Dati i Links cerca nel database un match facendo ricorso a 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fin::searchFromLinks
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Stampa a video il nome del brano identificato.
\end_layout

\begin_layout Standard
Eventualmente, se viene passato a riga di comando l'argomento 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

--to-json
\end_layout

\end_inset

, mock_client stampa su stdout un oggetto JSON contenente i campi della
 struct 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

SearchResult
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Per maggiori informazioni vedere il paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Inserimento-brano"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:L'eseguibile-wasm"

\end_inset

L'eseguibile wasm_client
\end_layout

\begin_layout Standard
Il compito principale dell'eseguibile 
\emph on
wasm_client
\emph default
 è quello di acquisire un breve segmento audio attraverso il microfono del
 client, estrarne i Links e inviarli al server_rest per avviare il processo
 di identificazione.
 Lo scope del client Wasm è quindi quello rappresentato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale-wasm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/architettura_generale_wasm.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-architettura-generale-wasm"

\end_inset

Schema architettura generale, dettaglio 
\emph on
wasm_client
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
L'entry point
\end_layout

\begin_layout Standard
L'entry point del client Wasm è la funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

main
\end_layout

\end_inset

 che si occupa di:
\end_layout

\begin_layout Enumerate
Creare un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioContext
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Istanziare il 
\emph on
render thread
\emph default
 nel quale verrà eseguito il codice dell'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioWorklet
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "audioworklet"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
È stato infatti definito un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioWorklet
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Nient'altro che un 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioNode
\end_layout

\end_inset

 custom
\end_layout

\end_inset

 per l'estrazione dei Links.
\end_layout

\begin_layout Standard
La creazione del render thread è, in realtà, un'operazione asincrona: una
 volta terminata viene richiamata la callback 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

audioWorkletProcessorCreated
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
La callback audioWorkletProcessorCreated
\end_layout

\begin_layout Standard
La callback 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

audioWorkletProcessorCreated
\end_layout

\end_inset

 si occupa della creazione vera e propria dell'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioWorklet
\end_layout

\end_inset

 per l'estrazione dei Links e della preparazione dell'interfaccia da esporre
 all'utente.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Il primo passo è la creazione dell'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioWorklet
\end_layout

\end_inset

 configurato come segue:
\end_layout

\begin_layout Itemize
Un solo input
\end_layout

\begin_layout Itemize
Nessun output
\end_layout

\begin_layout Itemize
Una funzione per il processamento custom chiamata 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

processAudio
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

A questo punto può essere creata la pagina HTML da mostrare all'utente.
\end_layout

\begin_layout Standard
Per prima cosa viene richiesto l'accesso al microfono dell'utente attraverso
 le API navigator JavaScript, richiedendo la disabilitazione dell'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

echoCancellation
\end_layout

\end_inset

 e del 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

noiseSuppression
\end_layout

\end_inset

, al fine di ottenere uno stream audio quanto più 
\emph on
raw
\emph default
 possibile.
 Inoltre è stato impostato il 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

channelCount
\end_layout

\end_inset

 a 1 per avere uno stream mono
\begin_inset Foot
status open

\begin_layout Plain Layout
Esistono microfoni stereo
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Viene quindi configurato il routing dei nodi nell'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioContext
\end_layout

\end_inset

 già creato come indicato in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Routing-audionodes"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

    
\backslash
node (mic)[rectangle, draw, minimum height=1cm]{Microfono};
\end_layout

\begin_layout Plain Layout

    
\backslash
node (worklet)[rectangle, draw, right of=mic, minimum height=1cm, xshift=3cm]{Au
dioWorklet};
\end_layout

\begin_layout Plain Layout

    
\backslash
draw[->] (mic) -- node[below] {} (worklet);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Routing-audionodes"

\end_inset

Routing 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioNode
\end_layout

\end_inset

s
\end_layout

\end_inset


\end_layout

\end_inset

Infine viene aggiunto un bottone 
\emph on
Record
\emph default
 che innesca il processo di registrazione del segmento audio e la sua identifica
zione.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:La-funzione-processAudio"

\end_inset

La funzione processAudio
\end_layout

\begin_layout Standard
Nello scope globale del client Wasm è stato dichiarato un 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{DummyReader}
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Vedere la sezione 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:La-classe-Reader"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

 che conterrà i vari campioni audio prodotti dal microfono.
\end_layout

\begin_layout Standard
La funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

processAudio
\end_layout

\end_inset

 è responsabile di leggere i campioni audio inviati all'
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{AudioWorklet}
\end_layout

\end_inset

 dal microfono e memorizzarli all'interno del 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{DummyReader}
\end_layout

\end_inset

.
 Una volta che il 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{DummyReader}
\end_layout

\end_inset

 contiene abbastanza campioni il processo di estrazione dei Links può essere
 avviato.
\end_layout

\begin_layout Standard
Si noti, però, che una volta estratti i Links questi dovranno essere inviati
 al server, il che presuppone il poter utilizzare l'API JavaScript 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fetch
\end_layout

\end_inset

.
 Tuttavia non è possibile usare questa API all'interno del rendering thread
 dell'
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{AudioWorklet}
\end_layout

\end_inset

: bisogna ritornare nel main thread JavaScript.
 A questo scopo viene richiamata la funzione:
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},breaklines=false,basicstyle={\ttfamily},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

void emscripten_audio_worklet_post_function_v(
\end_layout

\begin_layout Plain Layout

	EMSCRIPTEN_WEBAUDIO_T id,
\end_layout

\begin_layout Plain Layout

	void (*funcPtr)(void)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\end_inset

passando come primo parametro 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

EMSCRIPTEN_AUDIO_MAIN_THREAD
\end_layout

\end_inset

 ad indicare di voler dialogare con il main thread e come secondo parametro
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

messageReceivedOnMainThread
\end_layout

\end_inset

, un puntatore a funzione di una callback che verrà eseguita nel main thread.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:La-callback-messageReceivedOnMai"

\end_inset

La callback messageReceivedOnMainThread
\end_layout

\begin_layout Standard
Ritornati nel main thread JavaScript e con abbastanza campioni si può avviare
 il processo di identificazione.
 Si procede come segue:
\end_layout

\begin_layout Enumerate
Vengono calcolati i Links dal 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{DummyReader}
\end_layout

\end_inset

 utilizzando la funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fin::computeLinks
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
I Links vengono serializzati in un 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ByteBuffer}
\end_layout

\end_inset

 attraverso
\begin_inset Newline newline
\end_inset


\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

toByteBuffer
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Viene estratto lo stream di byte dal 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ByteBuffer}
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Viene configurata la 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fetch
\end_layout

\end_inset

 per eseguire una POST verso il server REST che ha come body lo stream di
 byte.
\end_layout

\begin_layout Enumerate
Viene effettuata la 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fetch
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Se la 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

fetch
\end_layout

\end_inset

 ha successo e la registrazione viene identificata allora viene mostrato
 il nome del brano, insieme ad alcune informazioni accessorie.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:La-durata-del-segmento-audio"

\end_inset

La durata del segmento audio
\end_layout

\begin_layout Standard
Sorge spontanea una domanda: qual è la lunghezza minima del segmento audio
 da registrare per avere un buon recognition rate?
\end_layout

\begin_layout Standard
Similmente a quanto già fatto nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:La-finestratura"
plural "false"
caps "false"
noprefix "false"

\end_inset

, si è predisposto un altro 
\emph on
ambiente di test
\emph default
, composto dai già citati brani e per ognuno di essi:
\end_layout

\begin_layout Enumerate
È stato estratto un segmento con una durata compresa tra 
\begin_inset Formula $0.5$
\end_inset

 e 
\begin_inset Formula $6$
\end_inset

 secondi, con un passo di 
\begin_inset Formula $0.5$
\end_inset

 secondi.
\end_layout

\begin_layout Enumerate
Ad ogni segmento è stato applicato del rumore, facendo variare l'SNR in
 un range tra 
\begin_inset Formula $-40dB$
\end_inset

 e 
\begin_inset Formula $40dB$
\end_inset

 a passo 10
\begin_inset Foot
status open

\begin_layout Plain Layout
Similmente a quanto fatto nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:La-finestratura"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Per ogni segmento è stato avviato il processo di identificazione
\begin_inset Foot
status open

\begin_layout Plain Layout
Facendo ricorso a 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

mock_test
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Infine, è stato contato quante volte l'identificazione ha avuto successo,
 ottenendo il grafico in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Recognition-rate-lunghezza"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={Recognition rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.02,0.98)},anchor=north west}
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-40}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-40 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-30 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=blue,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-20 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=cyan,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-10 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=magenta,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{0}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$0 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=brown,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$10 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=lime,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$20 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=olive,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$30 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=orange,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{40}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$40 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Recognition-rate-lunghezza"

\end_inset

Recognition rate in funzione della lunghezza del segmento audio registrato
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={Rate falsi positivi},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.02,0.98)},anchor=north west}
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-40}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-40 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-30 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=blue,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-20 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=cyan,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$-10 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=magenta,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{0}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$0 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=brown,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$10 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=lime,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$20 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=olive,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$30 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	dashed,
\end_layout

\begin_layout Plain Layout

	color=orange,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{40}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_false, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{$40 dB$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rate-falsi-positivi"

\end_inset

Rate falsi positivi in funzione della lunghezza del segmento audio registrato
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In altre parole, con 
\begin_inset Formula $4$
\end_inset

 secondi si ottiene un recognition rate più che accettabile, vicino al 
\begin_inset Formula $98\%$
\end_inset

, se il rapporto segnale-rumore è superiore a 
\begin_inset Formula $10dB$
\end_inset

.
\end_layout

\begin_layout Standard
Per quanta riguarda il rate dei falsi positivi si rimanda alla figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rate-falsi-positivi"
plural "false"
caps "false"
noprefix "false"

\end_inset

: si può osservare che tale tasso non supera mai l'
\begin_inset Formula $1\%$
\end_inset

.
 Questo perché, in presenza di poche similarità
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:L'identificazione-di-un"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

 tra il segmento registrato e il brano originale, l'algoritmo evita di ritornare
 un risultato sicuramente errato.
\end_layout

\begin_layout Standard
Tuttavia, è opportuno considerare, ancora una volta, che le condizioni di
 test potrebbero non corrispondere esattamente a quelle di un ambiente reale.
 Pertanto, per tenere conto dell'impossibilità di simulare perfettamente
 tale ambiente, sarebbe ragionevole scegliere una durata superiore ai 
\begin_inset Formula $4$
\end_inset

 secondi.
\end_layout

\begin_layout Standard
Nel client Wasm viene utilizzata una durata pari a 
\begin_inset Formula $5$
\end_inset

 secondi.
\end_layout

\begin_layout Section
Ulteriori problemi col CORS
\end_layout

\begin_layout Standard
Wasm utilizza l'oggetto 
\family typewriter
SharedArrayBuffer
\family default
 per consentire una comunicazione efficiente tra thread e migliorare le
 prestazioni.
 
\family typewriter
SharedArrayBuffer
\family default
 è un tipo di buffer condiviso, utilizzato, ad esempio, per la comunicazione
 tra main thread e rendering thread, permettendo contemporaneamente a entrambi
 di poter accedere in modo sincronizzato ai dati in esso contenuti.
\end_layout

\begin_layout Standard
Tuttavia, 
\family typewriter
SharedArrayBuffer
\family default
 può rappresentare anche una minaccia per la sicurezza se utilizzato in
 modo improprio
\begin_inset CommandInset citation
LatexCommand cite
key "coop"
literal "true"

\end_inset

, poiché può essere utilizzato per attacchi di tipo side-channel tipo Spectre,
 che consentono a un sito web malintenzionato di accedere ai dati sensibili
 di altri siti web aperti contemporaneamente nella stessa finestra del browser.
 Per questo motivo, l'utilizzo di 
\family typewriter
SharedArrayBuffer
\family default
 è subordinato all'implementazione di due policy di sicurezza sul server
 che ospita la RIA, anch'esse definite nel protocollo CORS: Cross-Origin-Embedde
r-Policy (COEP) e Cross-Origin-Opener-Policy (COOP).
\end_layout

\begin_layout Standard
In particolare, COEP con il valore 
\emph on
require-corp
\emph default
 specifica che l'origin dev'essere la stessa tra l'ambiente in cui è stato
 creato lo 
\family typewriter
SharedArrayBuffer
\family default
 e l'ambiente in cui viene utilizzato.
\end_layout

\begin_layout Standard
Il server web che serve la RIA è quindi stato modificato di conseguenza.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:L'eseguibile-lyrics"

\end_inset

L'eseguibile lyrics
\end_layout

\begin_layout Standard
L'eseguibile 
\emph on
lyrics
\emph default
 ha un comportamento simile a wasm_client
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi capitolo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:L'eseguibile-wasm"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

, ma, oltre al processo di identificazione del segmento audio, viene presentato
 sul client il testo del brano riconosciuto, sincronizzato in tempo reale.
\end_layout

\begin_layout Standard
Lo scope di 
\emph on
lyrics
\emph default
 è quello in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale-lyrics"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/architettura_generale_lyrics.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schema-architettura-generale-lyrics"

\end_inset

Schema architettura generale, dettaglio 
\emph on
lyrics
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il processo dal punto 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcircled{1}
\end_layout

\end_inset

 al punto 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcircled{6}
\end_layout

\end_inset

 è pressoché identico a quanto già presentato nel caso di wasm_client.
\end_layout

\begin_layout Standard
Le uniche differenze introdotte sono dovute al fatto che è necessario sincronizz
are il brano che l'utente sta ascoltando col relativo testo: verranno analizzate
 di seguito.
\end_layout

\begin_layout Standard
Lo scopo dell'eseguibile lyrics è, in ultima analisi, la realizzazione di
 una 
\emph on
second screen application
\emph default
, per fornire un contenuto supplementare
\begin_inset Foot
status open

\begin_layout Plain Layout
Il testo del brano
\end_layout

\end_inset

 ad un contenuto principale, ovvero un brano in riproduzione.
 In figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Screenshot-lyrics"
plural "false"
caps "false"
noprefix "false"

\end_inset

 un esempio di funzionamento.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template RasterImage
	filename img/screenshot_lyrics.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Screenshot-lyrics"

\end_inset

Screenshot funzionamento 
\emph on
lyrics
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Il server REST lyrics
\end_layout

\begin_layout Standard
Il 
\emph on
server REST lyrics
\emph default
 si occupa di fornire il testo di un determinato brano.
 Espone un unico endpoint: 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

/lyrics/{song_id}
\end_layout

\end_inset

, dove 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4"
inline true
status open

\begin_layout Plain Layout

song_id
\end_layout

\end_inset

 è l'id del brano del quale si vuole ottenere il testo.
\end_layout

\begin_layout Standard
La risposta ritornata è in formato JSON e segue uno schema come quello indicato
 di seguito:
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	
\begin_inset Quotes fld
\end_inset

song_id
\begin_inset Quotes frd
\end_inset

: song_id,
\end_layout

\begin_layout Plain Layout

	
\begin_inset Quotes fld
\end_inset

lyrics
\begin_inset Quotes frd
\end_inset

: [
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			
\begin_inset Quotes fld
\end_inset

offset
\begin_inset Quotes frd
\end_inset

: 1.2,
\end_layout

\begin_layout Plain Layout

			
\begin_inset Quotes fld
\end_inset

text
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

Line 1
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout

		}, {
\end_layout

\begin_layout Plain Layout

			
\begin_inset Quotes fld
\end_inset

offset
\begin_inset Quotes frd
\end_inset

: 2.2,
\end_layout

\begin_layout Plain Layout

			
\begin_inset Quotes fld
\end_inset

text
\begin_inset Quotes frd
\end_inset

: 
\begin_inset Quotes fld
\end_inset

Line 2
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Dove 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

offset
\end_layout

\end_inset

 indica l'offset temporale in secondi, rispetto all'inizio del brano originale,
 in cui viene cantato il testo 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

text
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
La funzione processAudio
\end_layout

\begin_layout Standard
La funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

processAudio
\end_layout

\end_inset

 è molto simile a quella già discussa per wasm_client nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:La-funzione-processAudio"
plural "false"
caps "false"
noprefix "false"

\end_inset

, le uniche differenze significative sono riportate di seguito:
\end_layout

\begin_layout Itemize
È stata introdotta una variabile globale 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::chrono::system_clock::time_point firstSampleTime
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
La variabile 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

 viene valorizzata quando vengono inseriti i primi campioni nel 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

DummyReader
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In altre parole, 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

 è un riferimento temporale a quando è stato acquisito il primo campione
 audio della registrazione da identificare.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/timeline_firstSampleTime.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Timeline-firstSampleTime"

\end_inset

Timeline con dettaglio 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Con riferimento alla figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Timeline-firstSampleTime"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

 viene valorizzato come segue:
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

std::chrono::milliseconds samples128Delta(
\end_layout

\begin_layout Plain Layout

	PROCESS_SAMPLES * 1000 / SAMPLE_RATE
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

firstSampleTime =
\end_layout

\begin_layout Plain Layout

	std::chrono::system_clock::now() - samples128Delta;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
È necessario, infatti, sottrarre 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

samples128Delta
\end_layout

\end_inset

 in quanto all'assegnazione di 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

 l'
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AudioWorklet
\end_layout

\end_inset

 ha già ricevuto 
\begin_inset Formula $128$
\end_inset

 campioni.
\end_layout

\begin_layout Section
La funzione getElapsedTimeSinceFirstSample
\end_layout

\begin_layout Standard
La funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

getElapsedTimeSinceFirstSample
\end_layout

\end_inset

 si occupa di calcolare quanti secondi sono passati da quando è stata valorizzat
a la variabile globale 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
È stato fatto in modo che questa funzione possa essere richiamata anche
 da JavaScript, sfruttando il meccanismo del 
\emph on
binding
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

EMSCRIPTEN_BINDINGS(my_module){
\end_layout

\begin_layout Plain Layout

	emscripten::function(
\end_layout

\begin_layout Plain Layout

		"getElapsedTimeSinceFirstSample",
\end_layout

\begin_layout Plain Layout

		&getElapsedTimeSinceFirstSample
\end_layout

\begin_layout Plain Layout

	);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

In questo modo da JavaScript la funzione potrà essere richiamata con un
 semplice:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,tabsize=4,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline false
status open

\begin_layout Plain Layout

const elapsedTime =
\end_layout

\begin_layout Plain Layout

	Module.getElapsedTimeSinceFirstSample();
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
L'utilizzo del clock corretto
\end_layout

\begin_layout Standard
Nel contesto di calcolo della differenza temporale tra due istanti, normalmente,
 è essenziale fare affidamento su clock garantiti monotoni crescenti, come
 ad esempio 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::chrono::steady_clock
\end_layout

\end_inset

 o 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::chrono::high_resolution_clock
\end_layout

\end_inset

.
 Tuttavia, occorre considerare che la variabile 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

 viene inizializzata nel rendering thread dell'AudioWorklet, mentre la funzione
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

getElapsedTimeSinceFirstSample
\end_layout

\end_inset

 viene invocata nel main thread di JavaScript: in altre parole non è detto
 che il clock che valorizza 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true"
inline true
status open

\begin_layout Plain Layout

firstSampleTime
\end_layout

\end_inset

 e quello utilizzato per calcolare la differenza temporale utilizzino lo
 stesso riferimento temporale.
 La mancanza di sincronizzazione può portare, quindi, a risultati privi
 di significato nel richiamo di 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

getElapsedTimeSinceFirstSample
\end_layout

\end_inset

.
 Pertanto, risulta necessario utilizzare il 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

std::chrono::system_clock
\end_layout

\end_inset

, che seppur non monotono crescente, garantisce l'utilizzo dello stesso
 riferimento temporale per ogni sua istanza, ovvero i secondi passati dalla
 
\emph on
UNIX epoch
\emph default
.
\end_layout

\begin_layout Section
La callback messageReceivedOnMainThread
\end_layout

\begin_layout Standard
Inizialmente la callback 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

messageReceivedOnMainThread
\end_layout

\end_inset

 si comporta esattamente come quella già presentata per wasm_client nel
 paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:La-callback-messageReceivedOnMai"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Tuttavia, dopo il processo di riconoscimento, oltre all'id 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

song_id
\end_layout

\end_inset

 del brano riconosciuto, viene memorizzato anche l'offset temporale 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

time_delta
\end_layout

\end_inset

 tra la registrazione e il brano originale
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:L'identificazione-di-un"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
A questo punto:
\end_layout

\begin_layout Enumerate
Viene reperito il testo del brano con id 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

song_id
\end_layout

\end_inset

, facendo una richiesta verso il server REST lyrics
\end_layout

\begin_layout Enumerate
Viene richiamata la funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

getElapsedTimeSinceFirstSample
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Viene schedulata la visualizzazione del testo al tempo corretto (vedi figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Timeline-lyrics"
plural "false"
caps "false"
noprefix "false"

\end_inset

): il 
\begin_inset Formula $\mathtt{text}_{i}$
\end_inset

, ovvero il testo i-esimo, dovrà essere visualizzato all'istante:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\alpha=\mathtt{offset}_{i}-\mathtt{elapsedTime}-\mathtt{time\_delta}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset External
	template Inkscape
	filename img/timeline_lyrics.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Timeline-lyrics"

\end_inset

Timeline visualizzazione lyrics
\end_layout

\end_inset


\end_layout

\end_inset

La schedulazione avviene facendo ricorso alla funzione 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,keywordstyle={\color{blue}},commentstyle={\color{magenta}\itshape},emphstyle={\color{red}},stringstyle={\color{green}},identifierstyle={\color{cyan}}"
inline true
status open

\begin_layout Plain Layout

setTimeout
\end_layout

\end_inset

 di JavaScript.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Confronto-con-OLAF"

\end_inset

Confronto con OLAF
\end_layout

\begin_layout Standard

\emph on
OLAF
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/JorenSix/Olaf
\end_layout

\end_inset


\end_layout

\end_inset

 è un'applicazione per l'identificazione audio, simile nello scopo, all'algoritm
o già presentato in questo documento.
\end_layout

\begin_layout Standard
Il progetto è pensato principalmente per essere utilizzato su piattaforme
 embedded, ma può essere eseguito anche su computer tradizionali.
 È implementato in C e i suoi obiettivi sono quelli di essere efficiente,
 ma allo stesso tempo facilmente portabile su architetture diverse.
\end_layout

\begin_layout Standard
Nella tabella 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Principali-differenze-tra"
plural "false"
caps "false"
noprefix "false"

\end_inset

 sono elencate, a colpo d'occhio, alcune delle differenze tra l'algoritmo
 presentato in questo documento e OLAF: questi dati sono stati ottenuti
 analizzando il codice sorgente dell'applicazione e in particolare il file
 
\family typewriter
olaf_config.c
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
fin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
OLAF
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Funzione finestra
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hann
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hamming
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Dimensione finestra
\emph default
 (campioni)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $512$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1024$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Sample rate
\emph default
 (Hz)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $16000$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Step size finestra
\emph default
 (campioni)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $256$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $128$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Overlap finestre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $50\%$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $12.5\%$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Frequenza minima 
\emph default
(Hz)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $174$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $140$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Frequenza massima 
\emph default
(Hz)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3616$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8000$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Distanza picco-anchor minima 
\emph default
(ms)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $16$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Distanza picco-anchor massima
\emph default
 (ms)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3000$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $264$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Numero minimo Link comuni per match
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $15$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $6$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Principali-differenze-tra"

\end_inset

Principali differenze tra fin e OLAF
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Vi sono anche alcune importati differenze su cosa i due algoritmi considerano
 
\emph on
picco
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:I-Links"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Nel caso di OLAF un picco è definito tale se e solo se, nello spettro, è
 un punto di massimo locale nell'intorno di:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $1.6KHz$
\end_inset

 sull'asse delle frequenze
\end_layout

\begin_layout Enumerate
\begin_inset Formula $200ms$
\end_inset

 sull'asse dei tempi
\end_layout

\begin_layout Standard
Inoltre, il numero di picchi per finestra viene limitato a 
\begin_inset Formula $60$
\end_inset

.
\end_layout

\begin_layout Standard
Nel caso di fin, invece, la definizione di picco è più 
\emph on
fine
\emph default
.
 L'algoritmo è già stato trattato
\emph on
 
\emph default
nei paragrafi 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:I-Peaks"
plural "false"
caps "false"
noprefix "false"

\end_inset

 e 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:I-Links"
plural "false"
caps "false"
noprefix "false"

\end_inset

, ma qui di seguito viene riportato un breve recap: occorre discriminare
 tra picco 
\emph on
candidato 
\emph default
e picco 
\emph on
effettivo
\emph default
.
\end_layout

\begin_layout Standard
Un picco è considerato 
\emph on
candidato
\emph default
 se e solo se è un punto di massimo locale nell'intorno di 
\begin_inset Formula $78Hz$
\end_inset

 sull'asse delle frequenze.
\end_layout

\begin_layout Standard
A questo punto viene effettuato un ulteriore passaggio: i picchi candidati
 vengono raccolti per ogni banda critica e a passo di 
\begin_inset Formula $500ms$
\end_inset

 (
\begin_inset Formula $C=32$
\end_inset

); solo i 
\begin_inset Formula $3$
\end_inset

 picchi candidati ad intensità maggiore diventano picchi 
\emph on
effettivi
\emph default
.
\end_layout

\begin_layout Standard
Inoltre, nella creazione dei Link, i picchi che lo compongono devono far
 parte obbligatoriamente della stessa banda critica, cosa che non avviene
 nel caso di OLAF.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Si è quindi proceduto nel valutare la bontà dei due algoritmi, adottando
 un approccio simile a quanto già descritto nel paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:La-durata-del-segmento-audio"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 È stato predisposto un altro 
\emph on
ambiente di test
\emph default
, composto dai già citati brani e per ognuno di questi brani:
\end_layout

\begin_layout Enumerate
È stato estratto un segmento con una durata compresa tra 
\begin_inset Formula $0.5$
\end_inset

 e 
\begin_inset Formula $6$
\end_inset

 secondi, con un passo di 
\begin_inset Formula $0.5$
\end_inset

 secondi.
\end_layout

\begin_layout Enumerate
Ad ogni segmento è stato applicato del rumore, facendo variare l'SNR in
 un range tra 
\begin_inset Formula $-40dB$
\end_inset

 e 
\begin_inset Formula $40dB$
\end_inset

 a passo 10.
\end_layout

\begin_layout Enumerate
Per ogni segmento è stato avviato il processo di identificazione utilizzando
 sia fin che OLAF.
\end_layout

\begin_layout Standard
Nelle figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Panako--30"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Panako--10"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Panako-10"
plural "false"
caps "false"
noprefix "false"

\end_inset

 e 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Panako-30"
plural "false"
caps "false"
noprefix "false"

\end_inset

 viene riportato il rate delle identificazioni corrette, mettendo a confronto
 i due algoritmi.
 È stato escluso il grafico nel caso 
\begin_inset Formula $SNR=-40dB$
\end_inset

 in quanto entrambi gli algoritmi presentavano un true positive rate pressoché
 nullo.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.02,0.98)},anchor=north west,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.02,0.98)},anchor=north west,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Panako--30"

\end_inset

Rate positivi con 
\begin_inset Formula $SNR=-30dB$
\end_inset

 e 
\begin_inset Formula $SNR=-20dB$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.02,0.98)},anchor=north west,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{-10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.02,0.98)},anchor=north west,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{0}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{0}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Panako--10"

\end_inset

Rate positivi con 
\begin_inset Formula $SNR=-10dB$
\end_inset

 e 
\begin_inset Formula $SNR=0dB$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.98,0.02)},anchor=south east,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{10}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.98,0.02)},anchor=south east,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{20}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Panako-10"

\end_inset

Rate positivi con 
\begin_inset Formula $SNR=10dB$
\end_inset

 e 
\begin_inset Formula $SNR=20dB$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.98,0.02)},anchor=south east,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{30}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

	xlabel={Lunghezza segmento ($s$)},
\end_layout

\begin_layout Plain Layout

	ylabel={True positive rate},
\end_layout

\begin_layout Plain Layout

	width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	yticklabel={$
\backslash
pgfmathprintnumber{
\backslash
tick}
\backslash
%$},
\end_layout

\begin_layout Plain Layout

	no markers,
\end_layout

\begin_layout Plain Layout

	legend style={at={(0.98,0.02)},anchor=south east,draw=none},
\end_layout

\begin_layout Plain Layout

	legend cell align={left},
\end_layout

\begin_layout Plain Layout

	width=0.5
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

	xmin=0.5,
\end_layout

\begin_layout Plain Layout

	ymin=0, ymax=100,
\end_layout

\begin_layout Plain Layout

	enlarge y limits=0.25
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=red,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{40}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/recording_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{fin};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addplot+[
\end_layout

\begin_layout Plain Layout

	solid,
\end_layout

\begin_layout Plain Layout

	color=green,
\end_layout

\begin_layout Plain Layout

	discard if not={snr}{40}
\end_layout

\begin_layout Plain Layout

] table [
\end_layout

\begin_layout Plain Layout

	x=length, y=percentage_true, col sep=comma,
\end_layout

\begin_layout Plain Layout

] {data/panako_length_success_rate.csv};
\end_layout

\begin_layout Plain Layout


\backslash
addlegendentry{OLAF};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Panako-30"

\end_inset

Rate positivi con 
\begin_inset Formula $SNR=30dB$
\end_inset

 e 
\begin_inset Formula $SNR=40dB$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Dai grafici si possono estrarre le seguenti informazioni:
\end_layout

\begin_layout Itemize
Per un SNR compreso tra 
\begin_inset Formula $-20dB$
\end_inset

 e 
\begin_inset Formula $0dB$
\end_inset

 è evidente la superiorità di fin, che presenta un rate di riconoscimento
 quasi doppio per segmenti audio sufficientemente lunghi.
\end_layout

\begin_layout Itemize
Per un SNR compreso tra 
\begin_inset Formula $10dB$
\end_inset

 e 
\begin_inset Formula $40dB$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
per segmenti di durata superiore a circa 
\begin_inset Formula $2s$
\end_inset

 fin ottiene i risultati migliori.
\end_layout

\begin_layout Itemize
per segmenti di durata inferiore a circa 
\begin_inset Formula $2s$
\end_inset

 OLAF ha un rate di riconoscimento più elevato.
\end_layout

\end_deeper
\begin_layout Itemize
Il rate di riconoscimento di fin tende al 
\begin_inset Formula $100\%$
\end_inset

 più velocemente di quello di OLAF.
\end_layout

\begin_layout Standard
Questi comportamenti sono giustificati dall'implementazione delle due soluzioni.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Fin ha un algoritmo per la scelta dei picchi più rifinito, in cui viene
 sfruttato il concetto di banda critica.
 Questo gli permette di essere più immune al rumore.
\end_layout

\begin_layout Standard
Dall'altro lato OLAF performa meglio quando il rumore è relativamente 
\emph on
contenuto
\emph default
 ed è superiore a fin per segmenti di durata inferiore a 
\begin_inset Formula $2s$
\end_inset

.
 Questo è dovuto al metodo con il quale vengono costruiti i Link in fin:
 la distanza tra anchor point e picco dev'essere di almeno 
\begin_inset Formula $1s$
\end_inset

, mentre in OLAF tale distanza è pari a 
\begin_inset Formula $16ms$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi tabella 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Principali-differenze-tra"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
 Si noti, infatti, come nei grafici per 
\begin_inset Formula $SNR\geq10dB$
\end_inset

 la curva di fin cambia repentinamente pendenza nell'intorno di 
\begin_inset Formula $1s$
\end_inset

.
 In altre parole: i Link iniziano ad essere creati per segmenti audio di
 lunghezza superiore a 
\begin_inset Formula $1s$
\end_inset

 nel caso di fin, di 
\begin_inset Formula $16ms$
\end_inset

 nel caso di OLAF.
 In futuro si potrebbe pensare di modificare questi parametri, per migliorare,
 potenzialmente, le performance di fin nel caso di segmenti audio più brevi.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Utilizzi-futuri"

\end_inset

Utilizzi futuri
\end_layout

\begin_layout Standard
Di seguito ci si focalizzerà sui possibili utilizzi futuri del sistema descritto
 nei capitoli precedenti.
\end_layout

\begin_layout Standard
Nello specifico è importante notare come l'algoritmo del fingerprinting
 possa essere usato anche in ambiti diversi rispetto a quello del riconoscimento
 musicale, quali la sincronizzazione di più stream multimediali e il riconoscime
nto di particolari segnali audio che indicano l'accadere di un determinato
 evento.
\end_layout

\begin_layout Section
Sincronizzazione di contenuti provenienti da sorgenti differenti
\end_layout

\begin_layout Standard
Uno scenario tipico nella post-produzione di materiale audiovisivo è la
 sincronizzazione di stream multimediali provenienti da più fonti.
\end_layout

\begin_layout Standard
Si pensi ad uno scenario come quello in figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Acquisizioni-multiple"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template Inkscape
	filename img/acquisizioni_multiple.svg
	width 75col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Acquisizioni-multiple"

\end_inset

Scenario acquisizioni multiple
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Una videocamera acquisisce un contenuto audio e video, l'audio viene registrato
 attraverso il microfono interno della videocamera.
\end_layout

\begin_layout Enumerate
Un registratore audio acquisisce attraverso un microfono (per esempio un
 lavalier) l'audio di un operatore.
\end_layout

\begin_layout Standard
In situazioni di questo tipo è quindi necessario sincronizzare l'audio 
\emph on
ambientale
\emph default
 registrato dalla videocamera con quello proveniente dal registratore esterno.
\end_layout

\begin_layout Standard
Tipicamente si fa ricorso ad un sistema basato su timecode.
 Il timecode fornisce un riferimento comune di tempo che consente di coordinare
 con precisione più fonti multimediali, facilitando il montaggio e la post-produ
zione.
 Tuttavia, l'impiego del timecode richiede attrezzature specifiche, potenzialmen
te aumentando i costi e la complessità del processo di produzione.
 Inoltre, in caso di errori o discrepanze nella generazione o nella lettura
 del timecode, potrebbero verificarsi problemi di sincronizzazione che richiedon
o ulteriori sforzi di correzione.
\end_layout

\begin_layout Standard
Un'alternativa, soprattutto in ambienti meno 
\emph on
professionali
\emph default
, potrebbe essere quella di utilizzare un sistema basato sull'algoritmo
 descritto precedentemente.
 Si faccia riferimento alla figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sinc-acquisizioni-multiple"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template Inkscape
	filename img/acquisizioni_multiple_sincronizzazione.svg
	width 55col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sinc-acquisizioni-multiple"

\end_inset

Sincronizzazione acquisizioni multiple
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
L'acquisizione audio è disponibile.
\end_layout

\begin_layout Enumerate
L'acquisizione audio/video è disponibile.
\end_layout

\begin_layout Enumerate
L'audio viene estratto dall'acquisizione
\begin_inset Foot
status open

\begin_layout Plain Layout
La sincronizzazione avviene sul segnale audio e non sui fotogrammi
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
L'acquisizione audio estratta è disponibile.
\end_layout

\begin_layout Enumerate
Viene avviato l'algoritmo per identificare l'
\emph on
offset temporale
\emph default
 tra le due acquisizioni.
\end_layout

\begin_layout Enumerate
L'offset temporale viene visualizzato all'utente.
\end_layout

\begin_layout Standard
A questo punto, l'operatore di post-produzione può sincronizzare le due
 acquisizioni, evitando di utilizzare sistemi basati su timecode.
\end_layout

\begin_layout Standard
Si potrebbe pensare, inoltre, facendo riferimento alla figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schema-architettura-generale"
plural "false"
caps "false"
noprefix "false"

\end_inset

, di adottare un'architettura semplificata del sistema:
\end_layout

\begin_layout Itemize
Il client, il server REST, il database e i segnali audio da analizzare risiedere
bbero tutti sulla stessa macchina.
\end_layout

\begin_layout Itemize
Sebbene si continuerà ad utilizzare un database per le operazioni di memorizzazi
one dei Links
\begin_inset Foot
status open

\begin_layout Plain Layout
Vedi paragrafo 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:I-Links"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

, si potrebbe utilizzare un DBMS più lightweight come SQLite.
\end_layout

\begin_layout Itemize
Il database dei Links andrebbe creato e distrutto ad ogni esecuzione dell'algori
tmo.
\end_layout

\begin_layout Section
Personalizzazione dei segmenti pubblicitari
\end_layout

\begin_layout Standard
La personalizzazione della pubblicità per gli utenti rappresenta un'importante
 strategia di marketing che mira a fornire annunci pubblicitari mirati e
 rilevanti basati sui dati personali e comportamentali degli individui.
 Questo approccio si basa sull'idea di offrire agli utenti contenuti promozional
i che siano maggiormente allineati ai loro interessi, preferenze e comportamenti
 di consumo.
\end_layout

\begin_layout Standard
Come afferma Kotler
\begin_inset CommandInset citation
LatexCommand cite
key "kotler1989mass"
literal "true"

\end_inset

, il micromarketing consiste nel suddividere un mercato in segmenti specifici
 di clienti, che possono essere raggiunti in modo più mirato con prodotti,
 prezzi, messaggi e canali specifici.
 La personalizzazione della pubblicità si basa proprio su questo concetto,
 adattando l'approccio promozionale per soddisfare le esigenze specifiche
 di ciascun individuo o segmento di utenti.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La personalizzazione della pubblicità offre diversi vantaggi sia per gli
 utenti che per gli inserzionisti:
\end_layout

\begin_layout Itemize
Gli utenti possono ricevere annunci pubblicitari che rispecchiano i loro
 interessi, fornendo loro informazioni pertinenti e promozioni su prodotti
 e servizi che potrebbero effettivamente interessarli.
 Ciò può migliorare l'esperienza dell'utente, rendendo la pubblicità meno
 invasiva e più rilevante.
\end_layout

\begin_layout Itemize
D'altra parte, gli inserzionisti possono beneficiare della personalizzazione
 della pubblicità in quanto possono raggiungere un pubblico più specifico
 e qualificato.
 La capacità di selezionare gli utenti in base alle loro caratteristiche
 e preferenze consente di ottimizzare la spesa pubblicitaria e migliorare
 l'efficacia delle campagne promozionali.
\end_layout

\begin_layout Standard
Una strada innovativa potrebbe consistere nella personalizzazione dei segmenti
 pubblicitari inseriti all'interno di uno stream audio.
\end_layout

\begin_layout Standard
Diverse pubblicazioni hanno esplorato l'audio fingerprinting per la sincronizzaz
ione e la sostituzione dei contenuti audio
\begin_inset CommandInset citation
LatexCommand cite
key "casagranda2015leveraging"
literal "true"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "bozios2001advanced"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Il sistema di fingerprinting e riconoscimento discusso in questo documento
 presenta un ottimo candidato per l'implementazione di un sistema simile.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template Inkscape
	filename img/segmento_personalizzato.svg
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Pubblicita-personalizzata"

\end_inset

Scenario segmento audio pubblicitario personalizzato
\end_layout

\end_inset


\end_layout

\end_inset

Prendendo come riferimento la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pubblicita-personalizzata"
plural "false"
caps "false"
noprefix "false"

\end_inset

, si potrebbe realizzare un sistema di personalizzazione di un segmento
 audio pubblicitario come segue:
\end_layout

\begin_layout Enumerate
Uno stream audio 
\emph on
raw
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Grezzo, non elaborato
\end_layout

\end_inset

 proveniente da una web radio viene scaricato in modo continuo da un client.
\end_layout

\begin_layout Enumerate
Lo stream audio contiene un 
\series bold
marker audio iniziale
\series default
, ovvero un suono 
\emph on
specifico
\emph default
 che indica che sta per iniziare un segmento pubblicitario
\end_layout

\begin_deeper
\begin_layout Enumerate
subito dopo il marker iniziale viene inserito un segmento pubblicitario
 standard, ovvero non personalizzato.
\end_layout

\begin_layout Enumerate
d'altro canto, un client 
\emph on
intelligente
\emph default
 può rilevare il marker iniziale: verrà analizzato questo scenario.
\end_layout

\end_deeper
\begin_layout Enumerate
Viene reperito un segmento pubblicitario personalizzato sulla base dell'ascoltat
ore da una sorgente terza.
\end_layout

\begin_layout Enumerate
Il segmento pubblicitario personalizzato viene inserito all'interno dello
 stream finale che l'utente ascolta.
\end_layout

\begin_layout Enumerate
Viene inserito un 
\series bold
marker audio finale
\series default
, che indica che il segmento pubblicitario è terminato.
\end_layout

\begin_deeper
\begin_layout Enumerate
il segmento pubblicitario personalizzato dovrebbe essere già stato scelto
 opportunamente, in modo tale che la durata sia compatibile con quella del
 segmento pubblicitario non personalizzato.
\end_layout

\begin_layout Enumerate
se così non fosse, si ritorna comunque allo stream 
\emph on
raw
\emph default
 quando viene ricevuto il marker finale.
\end_layout

\end_deeper
\begin_layout Standard
Si noti che:
\end_layout

\begin_layout Itemize
Questa soluzione è trasparente per il client non intelligente, ovvero non
 impatta su di esso, dato che fruisce lo stream 
\emph on
raw
\emph default
, così come ha sempre fatto.
\end_layout

\begin_layout Itemize
Il marker audio finale non è strettamente necessario, si potrebbe utilizzare
 un marker audio iniziale diverso a seconda del tempo a disposizione per
 il segmento pubblicitario.
\end_layout

\begin_layout Itemize
Il client dovrà avere un piccolo buffer, atto ad analizzare lo stream per
 individuare l'eventuale marker iniziale prima del playback.
\end_layout

\begin_layout Itemize
Potrebbe essere conveniente portare il database dei Links che caratterizzano
 i marker iniziali in locale sul client, in modo tale che il processo di
 identificazione sia più reattivo.
\end_layout

\begin_layout Chapter
Ringraziamenti
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Desidero esprimere la mia più profonda gratitudine a tutte le persone che
 mi hanno sostenuto durante il mio percorso universitario e durante la realizzaz
ione di questa tesi.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
Prima di tutto, vorrei ringraziare i miei genitori Gianni e Daniela, per
 il loro amore, il loro costante sostegno e l'incoraggiamento che mi hanno
 donato lungo tutto il cammino accademico.
 Senza di loro, tutto questo non sarebbe stato possibile.
\end_layout

\begin_layout Plain Layout
A mio padre, un uomo straordinario che ha saputo trasmettermi la passione
 per l'informatica sin da quando ero bambino.
 Grazie per aver reso la tecnologia parte integrante della nostra famiglia,
 per avermi fornito gli strumenti necessari per esplorare questo mondo.
 Ogni volta che mi portavi con te al lavoro da piccolo, mi hai aperto le
 porte di un mondo affascinante, permettendomi di affacciarmi sulle sfide
 e le possibilità dell'informatica.
 Se oggi posso dedicarmi a ciò che amo, è grazie a te e alla tua dedizione
 nel coltivare il mio interesse.
\end_layout

\begin_layout Plain Layout
A mia madre, confidente instancabile e sostegno incondizionato lungo il
 mio percorso.
 Tu hai creduto in me anche quando io stesso avevo dubbi, hai instillato
 in me fiducia e determinazione.
 Sei stata al mio fianco in ogni momento, ascoltando le mie gioie e le mie
 preoccupazioni, incoraggiandomi a superare ogni ostacolo.
 Hai saputo vedere il mio potenziale e mi hai sostenuto con il tuo amore
 incondizionato.
 Grazie, mamma, per il tuo sostegno costante, per avermi dato la forza di
 credere in me stesso e per avermi insegnato il valore della perseveranza.
 Senza di te, non avrei potuto realizzare tutto ciò che ho raggiunto.
 Il mio successo è anche il tuo successo, e per questo ti sono eternamente
 grato.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
Un ringraziamento speciale va al mio relatore, il professor Antonio Servetti,
 per la sua guida, il suo prezioso supporto, la sua fiducia in me e il tempo
 dedicatomi.
 La sua esperienza e il suo entusiasmo hanno reso questo percorso di ricerca
 ancora più stimolante e gratificante.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
Voglio inoltre ringraziare i miei amici, i 
\emph on
coki
\emph default
, che sono stati al mio fianco durante gli alti e i bassi di questa avventura
 accademica.
 Le nostre discussioni, le condivisioni e il sostegno reciproco hanno reso
 il mio percorso molto più leggero.
\end_layout

\begin_layout Plain Layout
A Lorenzo (
\emph on
Arabella
\emph default
), vorrei esprimere la mia gratitudine per la tua costante presenza, il
 tuo sostegno incondizionato e l'avermi fatto appassionare alla musica.
 Hai sempre creduto in me e hai condiviso le mie gioie e le mie sfide.
 La tua amicizia è un vero tesoro.
\end_layout

\begin_layout Plain Layout
A Emmanuel, desidero ringraziarti per le chiacchierate fino alle 3 di notte,
 le risate, i consigli, i piani diabolici e l'energia positiva.
 Hai reso i momenti di studio e di svago ancora più significativi con la
 tua presenza.
 Si sente quando non ci sei.
\end_layout

\begin_layout Plain Layout
A Andrea (
\emph on
Felipe
\emph default
), desidero ringraziarti per i tuoi preziosi aiuti tecnici e i consigli
 che mi hai fornito da buon (
\emph on
vero
\emph default
) informatico.
 Sono grato per la tua collaborazione e per aver condiviso con te questa
 passione per l'informatica in questi anni.
\end_layout

\begin_layout Plain Layout
Infine, a Gloria, voglio ringraziarti per le risate che abbiamo condiviso
 e i momenti che hai catturato con le tue preziose polaroid, che custodisco
 gelosamente.
 Ricorderò sempre i nostri momenti di spensieratezza e le biciclette rotte.
 Grazie per la tua allegria, la tua creatività e la tua amicizia.
\end_layout

\begin_layout Plain Layout
Non potrei essere più grato per avere amici così straordinari accanto a
 me.
 Grazie di cuore per tutto il vostro supporto e amicizia.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
Infine, desidero ringraziare tutti coloro che, in modo diretto o indiretto,
 hanno contribuito alla realizzazione di questa tesi.
 Il loro supporto, le loro risorse e il loro apporto hanno arricchito il
 mio lavoro e reso possibile la sua conclusione con successo.
\end_layout

\begin_layout Plain Layout
A tutte queste persone, che hanno condiviso con me gioie e sfide in questa
 avventura accademica, voglio dedicare il mio più sincero apprezzamento
 e riconoscimento.
 Senza il vostro aiuto e il vostro incoraggiamento, questa tesi non sarebbe
 stata una realtà.
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
Grazie di cuore a tutti voi.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "biblio"
options "plainnat"

\end_inset


\end_layout

\end_body
\end_document
